<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hyperledger.Indy.Sdk</name>
    </assembly>
    <members>
        <member name="T:Hyperledger.Indy.AnonCredsApi.AnonCreds">
            <summary>
            Provides methods for managing anonymous credentials.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerCreateSchemaCallback">
            <summary>
            Gets the callback to use when the IssuerCreateAndStoreClaimDefAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerCreateAndStoreClaimDefCallback">
            <summary>
            Gets the callback to use when the IssuerCreateAndStoreClaimDefAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerCreateAndStoreClaimRevocRegCallback">
            <summary>
            Gets the callback to use when the IssuerCreateAndStoreClaimRevocRegAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerCreateCredentialOfferCallback">
            <summary>
            Gets the callback to use when the IssuerCreateClaimAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerCreateCredentialCallback">
            <summary>
            Gets the callback to use when the IssuerCreateClaimAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerRevokeCredentialCallback">
            <summary>
            Gets the callback to use when the IssuerRevokeCredentialAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._issuerMergeRevocationRegistryDeltasCallback">
            <summary>
            The issuer merge revocation registry deltas callback.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._proverCreateMasterSecretCallback">
            <summary>
            The prover create master secret callback.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._proverCreateCredentialReqCallback">
            <summary>
            Gets the callback to use when the roverCreateAndStoreClaimReqAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._proverStoreCredentialCallback">
            <summary>
            The prover store credential callback.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._proverGetCredentialsCallback">
            <summary>
            Gets the callback to use when the ProverGetClaimsAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._proverGetClaimsForProofCallback">
            <summary>
            Gets the callback to use when the ProverGetClaimsForProofAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._proverCreateProofCallback">
            <summary>
            Gets the callback to use when the ProverCreateProofAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._verifierVerifyProofCallback">
            <summary>
            Gets the callback to use when the VerifierVerifyProofAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._createRevocationStateCallback">
            <summary>
            The create revocation state callback.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.AnonCredsApi.AnonCreds._updateRevocationStateCallback">
            <summary>
            The update revocation state callback.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerCreateSchemaAsync(System.String,System.String,System.String,System.String)">
             <summary>
             Create credential schema entity that describes credential attributes list and allows credentials
             interoperability.
            
             Schema is public and intended to be shared with all anoncreds workflow actors usually by publishing SCHEMA transaction
             to Indy distributed ledger.
            
             It is IMPORTANT for current version POST Schema in Ledger and after that GET it from Ledger
             with correct seq_no to save compatibility with Ledger.
             After that can call indy_issuer_create_and_store_credential_def to build corresponding Credential Definition.
            
             </summary>
             <returns>
             schemaId: identifier of created schema
             schemaJson: schema as json
             </returns>
             <param name="issuerDid">DID of schema issuer</param>
             <param name="name">Name of the schema</param>
             <param name="version">Version of the schema</param>
             <param name="attrs">A list of schema attributes descriptions</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerCreateAndStoreCredentialDefAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates keys for the given schema and signature type.
            </summary>
            <remarks>
            <para>This method creates both primary and revocation keys for the given
            signature type and schema and stores them in the provided <paramref name="wallet"/>.
            The generated claim definition is returned as a JSON string containing information about the 
            signature type, schema, the issuer's public key and the unique identifier of the public key 
            in the wallet.
            </para>
            <note type="note">Currently the only signature type that is supported is 'CL'.</note>
            </remarks>
            <param name="wallet">The wallet into which the claim definition will be stored.</param>
            <param name="issuerDid">The DID of the issuer of the claim definition.</param>
            <param name="schemaJson">The JSON schema of the claim definition.</param>
            <param name="tag">Allows to distinct between credential definitions for the same issuer and schema</param>
            <param name="type">The type of signature to use.</param>
            <param name="configJson">Whether to request non-revocation claim.</param>
            <returns>
            credDefId: identifier of created credential definition
            credDefJson: public part of created credential definition
            </returns>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerCreateAndStoreRevocRegAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.BlobStorageApi.BlobStorageWriter)">
             <summary>
             Create a new revocation registry for the given credential definition as tuple of entities:
             - Revocation registry definition that encapsulates credentials definition reference, revocation type specific configuration and
               secrets used for credentials revocation
             - Revocation registry state that stores the information about revoked entities in a non-disclosing way. The state can be
               represented as ordered list of revocation registry entries were each entry represents the list of revocation or issuance operations.
            
             Revocation registry definition entity contains private and public parts. Private part will be stored in the wallet. Public part
             will be returned as json intended to be shared with all anoncreds workflow actors usually by publishing REVOC_REG_DEF transaction
             to Indy distributed ledger.
            
             Revocation registry state is stored on the wallet and also intended to be shared as the ordered list of REVOC_REG_ENTRY transactions.
             This call initializes the state in the wallet and returns the initial entry.
            
             Some revocation registry types (for example, 'CL_ACCUM') can require generation of binary blob called tails used to hide information about revoked credentials in public
             revocation registry and intended to be distributed out of leger (REVOC_REG_DEF transaction will still contain uri and hash of tails).
             This call requires access to pre-configured blob storage writer instance handle that will allow to write generated tails.
            
             </summary>
             <returns>
             revoc_reg_id: identifier of created revocation registry definition
             revoc_reg_def_json: public part of revocation registry definition
             revoc_reg_entry_json: revocation registry entry that defines initial state of revocation registry</returns>
             <param name="wallet">wallet handler (created by open_wallet)..</param>
             <param name="issuerDid">a DID of the issuer signing transaction to the Ledger.</param>
             <param name="type">revocation registry type (optional, default value depends on credential definition type). Supported types are:
             - 'CL_ACCUM': Type-3 pairing based accumulator. Default for 'CL' credential definition type.</param>
             <param name="tag">allows to distinct between revocation registries for the same issuer and credential definition.</param>
             <param name="credDefId">id of stored in ledger credential definition.</param>
             <param name="configJson">type-specific configuration of revocation registry as json:
             - 'CL_ACCUM': {
                 "issuance_type": (optional) type of issuance. Currently supported:
                     1) ISSUANCE_BY_DEFAULT: all indices are assumed to be issued and initial accumulator is calculated over all indices;
                        Revocation Registry is updated only during revocation.
                     2) ISSUANCE_ON_DEMAND: nothing is issued initially accumulator is 1 (used by default);
                 "max_cred_num": maximum number of credentials the new registry can process (optional, default 100000)
             }.</param>
             <param name="tailsWriter">handle of blob storage to store tails</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerCreateCredentialOfferAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Create credential offer that will be used by Prover for
            credential request creation. Offer includes nonce and key correctness proof
            for authentication between protocol steps and integrity checking.
            </summary>
            <returns>
            credential offer json:
                {
                    "schema_id": string,
                    "cred_def_id": string,
                    // Fields below can depend on Cred Def type
                    "nonce": string,
                    "key_correctness_proof" : [key_correctness_proof]
                }
            </returns>
            <param name="wallet">Wallet.</param>
            <param name="credDefId"> id of credential definition stored in the wallet</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerCreateCredentialAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String,System.String,Hyperledger.Indy.BlobStorageApi.BlobStorageReader)">
             <summary>
             Check Cred Request for the given Cred Offer and issue Credential for the given Cred Request.
            
             Cred Request must match Cred Offer. The credential definition and revocation registry definition
             referenced in Cred Offer and Cred Request must be already created and stored into the wallet.
            
             Information for this credential revocation will be store in the wallet as part of revocation registry under
             generated cred_revoc_id local for this wallet.
            
             This call returns revoc registry delta as json file intended to be shared as REVOC_REG_ENTRY transaction.
             Note that it is possible to accumulate deltas to reduce ledger load.
             </summary>
             <returns>
             cred_json: Credential json containing signed credential values
                 {
                     "schema_id": string,
                     "cred_def_id": string,
                     "rev_reg_def_id", Optional&lt;string&gt;,
                     "values": [see cred_values_json above],
                     // Fields below can depend on Cred Def type
                     "signature": [signature],
                     "signature_correctness_proof": [signature_correctness_proof]
                 }
             cred_revoc_id: local id for revocation info (Can be used for revocation of this cred)
             revoc_reg_delta_json: Revocation registry delta json with a newly issued credential
             </returns>
             <param name="wallet">Wallet.</param>
             <param name="credOfferJson">a cred offer created by indy_issuer_create_credential_offer</param>
             <param name="credReqJson">a credential request created by indy_prover_create_credential_req.</param>
             <param name="credValuesJson">a credential containing attribute values for each of requested attribute names.
                 Example:
                 {
                  "attr1" : {"raw": "value1", "encoded": "value1_as_int" },
                  "attr2" : {"raw": "value1", "encoded": "value1_as_int" }
                 }</param>
             <param name="revRegId">id of revocation registry stored in the wallet.</param>
             <param name="blobStorageReader">configuration of blob storage reader handle that will allow to read revocation tails</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerRevokeCredentialAsync(Hyperledger.Indy.WalletApi.Wallet,Hyperledger.Indy.BlobStorageApi.BlobStorageReader,System.String,System.String)">
             <summary>
             
             Revoke a credential identified by a cred_revoc_id (returned by indy_issuer_create_credential).
            
             The corresponding credential definition and revocation registry must be already
             created an stored into the wallet.
            
             This call returns revoc registry delta as json file intended to be shared as REVOC_REG_ENTRY transaction.
             Note that it is possible to accumulate deltas to reduce ledger load.
             </summary>
             <returns>revoc_reg_delta_json: Revocation registry delta json with a revoked credential.</returns>
             <param name="wallet">Wallet.</param>
             <param name="blobStorageReader">configuration of blob storage reader handle that will allow to read revocation tails</param>
             <param name="revRegId">id of revocation registry stored in wallet</param>
             <param name="credRevocId">local id for revocation info.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.IssuerMergeRevocationRegistryDeltasAsync(System.String,System.String)">
            <summary>
            Merge two revocation registry deltas (returned by indy_issuer_create_credential or indy_issuer_revoke_credential) to accumulate common delta.
            Send common delta to ledger to reduce the load.
            </summary>
            <returns>merged_rev_reg_delta: Merged revocation registry delta.</returns>
            <param name="revRegDelta">revocation registry delta.</param>
            <param name="otherRevRegDelta">revocation registry delta for which PrevAccum value  is equal to current accum value of rev_reg_delta_json..</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.ProverCreateMasterSecretAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Creates a master secret with the specified name and stores it in the provided wallet.
            </summary>
            <remarks>
            The name of the master secret must be unique within the wallet.
            </remarks>
            <param name="wallet">The target wallet.</param>
            <param name="masterSecretId">The name of the master secret.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation has completed.</returns>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.ProverCreateCredentialReqAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String,System.String)">
             <summary>
             Creates a credential request for the given credential offer.
            
             The method creates a blinded master secret for a master secret identified by a provided name.
             The master secret identified by the name must be already stored in the secure wallet (see prover_create_master_secret)
             The blinded master secret is a part of the credential request.
             </summary>
             <returns>
             cred_req_json: Credential request json for creation of credential by Issuer
                 {
                  "prover_did" : string,
                  "cred_def_id" : string,
                     // Fields below can depend on Cred Def type
                  "blinded_ms" : [blinded_master_secret],
                  "blinded_ms_correctness_proof" : [blinded_ms_correctness_proof],
                  "nonce": string
                }
             cred_req_metadata_json: Credential request metadata json for processing of received form Issuer credential.
            </returns>
             <param name="wallet">Wallet.</param>
             <param name="proverDid">a DID of the prover.</param>
             <param name="credOfferJson">credential offer as a json containing information about the issuer and a credential.</param>
             <param name="credDefJson">credential definition json.</param>
             <param name="masterSecretId">the id of the master secret stored in the wallet.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.ProverStoreCredentialAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Check credential provided by Issuer for the given credential request,
            updates the credential by a master secret and stores in a secure wallet.
            </summary>
            <returns>out_cred_id: identifier by which credential is stored in the wallet.</returns>
            <param name="wallet">Wallet.</param>
            <param name="credId">(optional, default is a random one) identifier by which credential will be stored in the wallet</param>
            <param name="credReqJson">a credential request created by indy_prover_create_credential_req.</param>
            <param name="credReqMetadataJson">a credential request metadata created by indy_prover_create_credential_req</param>
            <param name="credJson">credential json received from issuer.</param>
            <param name="credDefJson">redential definition json.</param>
            <param name="revRegDefJson">revocation registry definition json.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.ProverGetCredentialsAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets human readable credentials according to the filter.
            If filter is NULL, then all credentials are returned.
            Credentials can be filtered by Issuer, credential_def and/or Schema.
            </summary>
            <returns>/// credentials json
                [{
                    "referent": string, // cred_id in the wallet
                    "values": [see cred_values_json above],
                    "schema_id": string,
                    "cred_def_id": string,
                    "rev_reg_id": Optional string,
                    "cred_rev_id": Optional string
                }].</returns>
            <param name="wallet">Wallet.</param>
            <param name="filterJson">filter_json: filter for credentials
                   {
                       "schema_id": string, (Optional)
                       "schema_issuer_did": string, (Optional)
                       "schema_name": string, (Optional)
                       "schema_version": string, (Optional)
                       "issuer_did": string, (Optional)
                       "cred_def_id": string, (Optional)
                   }</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.ProverGetCredentialsForProofReqAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets human readable credentials matching the given proof request.
            </summary>
            <returns>
            credentials_json: json with credentials for the given pool request.
                {
                    "requested_attrs": {
                        "[attr_referent]": [{ cred_info: (credential_info), interval: Optional(non_revoc_interval) }],
                        ...,
                    },
                    "requested_predicates": {
                        "requested_predicates": [{ cred_info: (credential_info), timestamp: Optional integer }, { cred_info: (credential_2_info), timestamp: Optional integer }],
                        "requested_predicate_2_referent": [{ cred_info: (credential_2_info), timestamp: Optional integer }]
                    }
                }, where credential is
                {
                    "referent": string,
                    "attrs": [{"attr_name" : "attr_raw_value"}],
                    "schema_id": string,
                    "cred_def_id": string,
                    "rev_reg_id": Optional int,
                    "cred_rev_id": Optional int,
                }
            </returns>
            <param name="wallet">Wallet.</param>
            <param name="proofRequestJson">/// proof_request_json: proof request json
                {
                    "name": string,
                    "version": string,
                    "nonce": string,
                    "requested_attributes": { // set of requested attributes
                         "[attr_referent]": [attr_info], // see below
                         ...,
                    },
                    "requested_predicates": { // set of requested predicates
                         "[predicate_referent]": [predicate_info], // see below
                         ...,
                     },
                    "non_revoked": Optional [non_revoc_interval], // see below,
                                   // If specified prover must proof non-revocation
                                   // for date in this interval for each attribute
                                   // (can be overridden on attribute level)
                }
            
            where
            attr_referent: Proof-request local identifier of requested attribute
            attr_info: Describes requested attribute
                {
                    "name": string, // attribute name, (case insensitive and ignore spaces)
                    "restrictions": Optional ['attr_filter'] // see below,
                                    // if specified, credential must satisfy to one of the given restriction.
                    "non_revoked": Optional [non_revoc_interval], // see below,
                                   // If specified prover must proof non-revocation
                                   // for date in this interval this attribute
                                   // (overrides proof level interval)
                }
            predicate_referent: Proof-request local identifier of requested attribute predicate
            predicate_info: Describes requested attribute predicate
                {
                    "name": attribute name, (case insensitive and ignore spaces)
                    "p_type": predicate type (Currently >= only)
                    "p_value": predicate value
                    "restrictions": Optional ['attr_filter'] // see below,
                                    // if specified, credential must satisfy to one of the given restriction.
                    "non_revoked": Optional [non_revoc_interval], // see below,
                                   // If specified prover must proof non-revocation
                                   // for date in this interval this attribute
                                   // (overrides proof level interval)
                }
            non_revoc_interval: Defines non-revocation interval
                {
                    "from": Optional int, // timestamp of interval beginning
                    "to": Optional int, // timestamp of interval ending
                }
            filter: see filter_json above
            </param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.ProverCreateProofAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Creates a proof according to the given proof request
             Either a corresponding credential with optionally revealed attributes or self-attested attribute must be provided
             for each requested attribute (see indy_prover_get_credentials_for_pool_req).
             A proof request may request multiple credentials from different schemas and different issuers.
             All required schemas, public keys and revocation registries must be provided.
             The proof request also contains nonce.
             The proof contains either proof or self-attested attribute value for each requested attribute.
            
             </summary>
             <remarks>
             where
             attr_referent: Proof-request local identifier of requested attribute
             attr_info: Describes requested attribute
                 {
                     "name": string, // attribute name, (case insensitive and ignore spaces)
                     "restrictions": Optional ['attr_filter'] // see above,
                                     // if specified, credential must satisfy to one of the given restriction.
                     "non_revoked": Optional [non_revoc_interval], // see below,
                                    // If specified prover must proof non-revocation
                                    // for date in this interval this attribute
                                    // (overrides proof level interval)
                 }
             predicate_referent: Proof-request local identifier of requested attribute predicate
             predicate_info: Describes requested attribute predicate
                 {
                     "name": attribute name, (case insensitive and ignore spaces)
                     "p_type": predicate type (Currently >= only)
                     "p_value": predicate value
                     "restrictions": Optional ['attr_filter'] // see above,
                                     // if specified, credential must satisfy to one of the given restriction.
                     "non_revoked": Optional [non_revoc_interval], // see below,
                                    // If specified prover must proof non-revocation
                                    // for date in this interval this attribute
                                    // (overrides proof level interval)
                 }
             non_revoc_interval: Defines non-revocation interval
                 {
                     "from": Optional int, // timestamp of interval beginning
                     "to": Optional int, // timestamp of interval ending
                 }
            
             </remarks>
             <returns>
             Proof json
             For each requested attribute either a proof (with optionally revealed attribute value) or
             self-attested attribute value is provided.
             Each proof is associated with a credential and corresponding schema_id, cred_def_id, rev_reg_id and timestamp.
             There is also aggregated proof part common for all credential proofs.
                 {
                     "requested": {
                         "revealed_attrs": {
                             "requested_attr1_id": {sub_proof_index: number, raw: string, encoded: string},
                             "requested_attr4_id": {sub_proof_index: number: string, encoded: string},
                         },
                         "unrevealed_attrs": {
                             "requested_attr3_id": {sub_proof_index: number}
                         },
                         "self_attested_attrs": {
                             "requested_attr2_id": self_attested_value,
                         },
                         "requested_predicates": {
                             "requested_predicate_1_referent": {sub_proof_index: int},
                             "requested_predicate_2_referent": {sub_proof_index: int},
                         }
                     }
                     "proof": {
                         "proofs": [ (credential_proof), (credential_proof), (credential_proof) ],
                         "aggregated_proof": (aggregated_proof)
                     }
                     "identifiers": [{schema_id, cred_def_id, Optional rev_reg_id , Optional timestamp}]
                 }
            
             </returns>
             <param name="wallet">Wallet.</param>
             <param name="proofRequest">proof_request_json: proof request json
                 {
                     "name": string,
                     "version": string,
                     "nonce": string,
                     "requested_attributes": { // set of requested attributes
                          "(attr_referent)": (attr_info), // see below
                          ...,
                     },
                     "requested_predicates": { // set of requested predicates
                          "(predicate_referent)": (predicate_info), // see below
                          ...,
                      },
                     "non_revoked": Optional [non_revoc_interval], // see below,
                                    // If specified prover must proof non-revocation
                                    // for date in this interval for each attribute
                                    // (can be overridden on attribute level)
                 }</param>
             <param name="requestedCredentials">
             requested_credentials_json: either a credential or self-attested attribute for each requested attribute
                 {
                     "self_attested_attributes": {
                         "self_attested_attribute_referent": string
                     },
                     "requested_attributes": {
                         "requested_attribute_referent_1": {"cred_id": string, "timestamp": Optional number, revealed: bool }},
                         "requested_attribute_referent_2": {"cred_id": string, "timestamp": Optional number, revealed: bool }}
                     },
                     "requested_predicates": {
                         "requested_predicates_referent_1": {"cred_id": string, "timestamp": Optional number }},
                     }
                 }.</param>
             <param name="masterSecret">the id of the master secret stored in the wallet</param>
             <param name="schemas">
             schemas_json: all schemas json participating in the proof request
                 {
                     [schema1_id]: [schema1_json],
                     [schema2_id]: [schema2_json],
                     [schema3_id]: [schema3_json],
                 }.</param>
             <param name="credentialDefs">
             credential_defs_json: all credential definitions json participating in the proof request
                 {
                     "cred_def1_id": (credential_def1_json),
                     "cred_def2_id": (credential_def2_json),
                     "cred_def3_id": (credential_def3_json),
                 }.</param>
             <param name="revStates">
             rev_states_json: all revocation states json participating in the proof request
                 {
                     "rev_reg_def1_id": {
                         "timestamp1": (rev_state1),
                         "timestamp2": (rev_state2),
                     },
                     "rev_reg_def2_id": {
                         "timestamp3": (rev_state3)
                     },
                     "rev_reg_def3_id": {
                         "timestamp4": (rev_state4)
                     },
                 }.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.VerifierVerifyProofAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Verifies a proof (of multiple credential).
            All required schemas, public keys and revocation registries must be provided.
            </summary>
            <returns>The verify proof async.</returns>
            <param name="proofRequest">
            proof_request_json: proof request json
                {
                    "name": string,
                    "version": string,
                    "nonce": string,
                    "requested_attributes": { // set of requested attributes
                         "(attr_referent)": (attr_info), // see below
                         ...,
                    },
                    "requested_predicates": { // set of requested predicates
                         "[predicate_referent]": (predicate_info), // see below
                         ...,
                     },
                    "non_revoked": Optional [non_revoc_interval], // see below,
                                   // If specified prover must proof non-revocation
                                   // for date in this interval for each attribute
                                   // (can be overridden on attribute level)
                }</param>
            <param name="proof">
            proof_json: created for request proof json
                {
                    "requested": {
                        "revealed_attrs": {
                            "requested_attr1_id": {sub_proof_index: number, raw: string, encoded: string},
                            "requested_attr4_id": {sub_proof_index: number: string, encoded: string},
                        },
                        "unrevealed_attrs": {
                            "requested_attr3_id": {sub_proof_index: number}
                        },
                        "self_attested_attrs": {
                            "requested_attr2_id": self_attested_value,
                        },
                        "requested_predicates": {
                            "requested_predicate_1_referent": {sub_proof_index: int},
                            "requested_predicate_2_referent": {sub_proof_index: int},
                        }
                    }
                    "proof": {
                        "proofs": [ &lt;credential_proof>, &lt;credential_proof>, &lt;credential_proof> ],
                        "aggregated_proof": &lt;aggregated_proof>
                    }
                    "identifiers": [{schema_id, cred_def_id, Optional&lt;rev_reg_id>, Optional timestamp }]
                }.</param>
            <param name="schemas">
            schemas_json: all schema jsons participating in the proof
                {
                    &lt;schema1_id>: &lt;schema1_json>,
                    &lt;schema2_id>: &lt;schema2_json>,
                    &lt;schema3_id>: &lt;schema3_json>,
                }.</param>
            <param name="credentialDefs">
            credential_defs_json: all credential definitions json participating in the proof
                {
                    "cred_def1_id": &lt;credential_def1_json>,
                    "cred_def2_id": &lt;credential_def2_json>,
                    "cred_def3_id": &lt;credential_def3_json>,
                }</param>
            <param name="revocRegDefs">
            rev_reg_defs_json: all revocation registry definitions json participating in the proof
                {
                    "rev_reg_def1_id": &lt;rev_reg_def1_json>,
                    "rev_reg_def2_id": &lt;rev_reg_def2_json>,
                    "rev_reg_def3_id": &lt;rev_reg_def3_json>,
                }.</param>
            <param name="revocRegs">
            rev_regs_json: all revocation registries json participating in the proof
                {
                    "rev_reg_def1_id": {
                        "timestamp1": &lt;rev_reg1>,
                        "timestamp2": &lt;rev_reg2>,
                    },
                    "rev_reg_def2_id": {
                        "timestamp3": &lt;rev_reg3>
                    },
                    "rev_reg_def3_id": {
                        "timestamp4": &lt;rev_reg4>
                    },
                }</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.CreateRevocationStateAsync(Hyperledger.Indy.BlobStorageApi.BlobStorageReader,System.String,System.String,System.Int64,System.String)">
            <summary>
            Create revocation state for credential in the particular time moment.
            </summary>
            <returns>
            revocation state json:
                {
                    "rev_reg": &lt;revocation registry>,
                    "witness": &lt;witness>,
                    "timestamp" : integer
                }
            .</returns>
            <param name="blobStorageReader">Configuration of blob storage reader handle that will allow to read revocation tails.</param>
            <param name="revRegDef">Revocation registry definition json.</param>
            <param name="revRegDelta">Revocation registry definition delta json.</param>
            <param name="timestamp">Time represented as a total number of seconds from Unix Epoch.</param>
            <param name="credRevId">user credential revocation id in revocation registry.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnonCreds.UpdateRevocationStateAsync(Hyperledger.Indy.BlobStorageApi.BlobStorageReader,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Create new revocation state for a credential based on existed state
            at the particular time moment (to reduce calculation time).
            </summary>
            <returns>
            revocation state json:
                {
                    "rev_reg": &lt;revocation registry>,
                    "witness": &lt;witness>,
                    "timestamp" : integer
                }
            .</returns>
            <param name="blobStorageReader">configuration of blob storage reader handle that will allow to read revocation tails.</param>
            <param name="revState">revocation registry state json</param>
            <param name="revRegDef">revocation registry definition json</param>
            <param name="revRegDelta">revocation registry definition delta json.</param>
            <param name="timestamp">time represented as a total number of seconds from Unix Epoch.</param>
            <param name="credRevId">user credential revocation id in revocation registry.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.AnoncredsAccumulatorFullException">
            <summary>
            Exception thrown when an anoncreds accumulator is full.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnoncredsAccumulatorFullException.#ctor">
            <summary>
            Initializes a new AnoncredsAccumulatorFullException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.AnoncredsNotIssuedException">
            <summary>
            Exception thrown when an anoncreds is not issued.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.AnoncredsNotIssuedException.#ctor">
            <summary>
            Initializes a new AnoncredsNotIssuedException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.ClaimRevokedException">
            <summary>
            Exception thrown when a claim has been revoked.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.ClaimRevokedException.#ctor">
            <summary>
            Initializes a new ClaimRevokedException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.DuplicateMasterSecretNameException">
            <summary>
            Exception thrown when an attempt to create a master-secret with the same name as an existing master-secret.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.DuplicateMasterSecretNameException.#ctor">
            <summary>
            Initializes a new DuplicateMasterSecretNameException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.InvalidUserRevocIndexException">
            <summary>
            Exception thrown when an invalid user revocation registry index is used.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.InvalidUserRevocIndexException.#ctor">
            <summary>
            Initializes a new InvalidUserRevocIndexException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreCredentialDefResult">
            <summary>
            Issuer create and store credential def result.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreCredentialDefResult.CredDefId">
            <summary>
            Gets the cred def identifier.
            </summary>
            <value>The cred def identifier.</value>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreCredentialDefResult.CredDefJson">
            <summary>
            Gets the cred def json.
            </summary>
            <value>The cred def json.</value>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreCredentialDefResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreCredentialDefResult"/> class.
            </summary>
            <param name="credDefId">Cred def identifier.</param>
            <param name="credDefJson">Cred def json.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreRevocRegResult">
            <summary>
            Issuer create and store revoc reg result.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreRevocRegResult.RevRegId">
            <summary>
            Gets the rev reg identifier.
            </summary>
            <value>The rev reg identifier.</value>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreRevocRegResult.RevRegDefJson">
            <summary>
            Gets the rev reg def json.
            </summary>
            <value>The rev reg def json.</value>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreRevocRegResult.RevRegEntryJson">
            <summary>
            Gets the rev reg entry json.
            </summary>
            <value>The rev reg entry json.</value>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreRevocRegResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateAndStoreRevocRegResult"/> class.
            </summary>
            <param name="revRegId">Rev reg identifier.</param>
            <param name="revRegDefJson">Rev reg def json.</param>
            <param name="revRegEntryJson">Rev reg entry json.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateCredentialResult">
            <summary>
            Result from calling IssuerCreateCredentialAsync.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.IssuerCreateCredentialResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateCredentialResult"/> class.
            </summary>
            <param name="credentialJson">Credential json.</param>
            <param name="revocId">Revoc identifier.</param>
            <param name="revocRegDeltaJson">Revoc reg delta json.</param>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateCredentialResult.RevocRegDeltaJson">
            <summary>
            Gets the revocation registry update JSON.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateCredentialResult.CredentialJson">
            <summary>
            Gets the credential JSON.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateCredentialResult.RevocId">
            <summary>
            Gets the revocation registration delta JSON.
            </summary>
            <value>The revoc identifier.</value>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateSchemaResult">
            <summary>
            Issuer create schema result.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateSchemaResult.SchemaId">
            <summary>
            Gets the schema identifier.
            </summary>
            <value>The schema identifier.</value>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.IssuerCreateSchemaResult.SchemaJson">
            <summary>
            Gets the schema json.
            </summary>
            <value>The schema json.</value>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.IssuerCreateSchemaResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hyperledger.Indy.AnonCredsApi.IssuerCreateSchemaResult"/> class.
            </summary>
            <param name="schemaId">Schema identifier.</param>
            <param name="schemaJson">Schema json.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_issuer_create_schema(System.Int32,System.String,System.String,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateSchemaCompletedDelegate)">
             <summary>
             Create credential schema entity that describes credential attributes list and allows credentials
             interoperability.
             to Indy distributed ledger.
            
             Schema is public and intended to be shared with all anoncreds workflow actors usually by publishing SCHEMA transaction
             to Indy distributed ledger.
            
             It is IMPORTANT for current version POST Schema in Ledger and after that GET it from Ledger
             with correct seq_no to save compatibility with Ledger.
             After that can call indy_issuer_create_and_store_credential_def to build corresponding Credential Definition.
            
             </summary>
             <returns>The issuer create schema.</returns>
             <param name="command_handle">Command handle to map callback to user context</param>
             <param name="issuer_did">DID of schema issuer.</param>
             <param name="name">Name of the schema</param>
             <param name="version">Version of the schema</param>
             <param name="attrs">A list of schema atribute descriptions.</param>
             <param name="cb">Callback that takes command result as parameter</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateSchemaCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_issuer_create_schema function.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_issuer_create_and_store_credential_def(System.Int32,System.IntPtr,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateAndStoreCredentialDefCompletedDelegate)">
             <summary>
             Create credential definition entity that encapsulates credentials issuer DID, credential schema, secrets used for signing credentials
             and secrets used for credentials revocation.
            
             Credential definition entity contains private and public parts. Private part will be stored in the wallet. Public part
             will be returned as json intended to be shared with all anoncreds workflow actors usually by publishing CRED_DEF transaction
             to Indy distributed ledger.
            
             It is IMPORTANT for current version GET Schema from Ledger with correct seq_no to save compatibility with Ledger.
            
             </summary>
             <param name="command_handle">The handle for the command that will be passed to the callback.</param>
             <param name="wallet_handle">wallet handle (created by open_wallet).</param>
             <param name="issuer_did">a DID of the issuer signing claim_def transaction to the Ledger</param>
             <param name="schema_json">schema as a json</param>
             <param name="tag">Allows to distinct between credential definitions for the same issuer and schema</param>
             <param name="type_">Signature type (optional). Currently only 'CL' is supported.</param>
             <param name="config_json">type-specific configuration of credential definition as json:
             - 'CL':
               - support_revocation: whether to request non-revocation credential (optional, default false)</param>
             <param name="cb">The function that will be called when the asynchronous call is complete.</param>
             <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateAndStoreCredentialDefCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_issuer_create_and_store_claim_def function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="cred_def_id"></param>
            <param name="cred_def_json">claim definition json containing information about signature type, schema and issuer's public key.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_issuer_create_and_store_revoc_reg(System.Int32,System.IntPtr,System.String,System.String,System.String,System.String,System.String,System.Int32,Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateAndStoreRevocRegCompletedDelegate)">
            <summary>
            Indies the issuer create and store revoc reg.
            </summary>
            <returns>The issuer create and store revoc reg.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="issuer_did">Issuer did.</param>
            <param name="type_">Type.</param>
            <param name="tag">Tag.</param>
            <param name="cred_def_id">Cred def identifier.</param>
            <param name="config_json">Config json.</param>
            <param name="tails_writer_handle">Tails writer handle.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateAndStoreRevocRegCompletedDelegate">
            <summary>
            Issuer create and store revoc reg completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_issuer_create_credential_offer(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateCredentialOfferCompletedDelegate)">
            <summary>
            Indies the issuer create credential offer.
            </summary>
            <returns>The issuer create credential offer.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="credDefId">Cred def identifier.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateCredentialOfferCompletedDelegate">
            <summary>
             Delegate for the function called back to by the indy_issuer_create_claim_offer function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="cred_offer_json">Claimn offer json</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_issuer_create_credential(System.Int32,System.IntPtr,System.String,System.String,System.String,System.String,System.Int32,Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateCredentialCompletedDelegate)">
            <summary>
            Indies the issuer create credential.
            </summary>
            <returns>The issuer create credential.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="cred_offer_json">Cred offer json.</param>
            <param name="cred_req_json">Cred req json.</param>
            <param name="cred_values_json">Cred values json.</param>
            <param name="rev_reg_id">Rev reg identifier.</param>
            <param name="blob_storage_reader_handle">BLOB storage reader handle.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerCreateCredentialCompletedDelegate">
            <summary>
            Issuer create credential completed delegate.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerRevokeCredentialCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_issuer_revoke_credential function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="revoc_reg_delta_json">Revocation registry update json with a revoked claim</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_issuer_merge_revocation_registry_deltas(System.Int32,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerMergeRevocationRegistryDeltasCompletedDelegate)">
            <summary>
            Indies the issuer merge revocation registry deltas.
            </summary>
            <returns>The issuer merge revocation registry deltas.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="rev_reg_delta_json">Rev reg delta json.</param>
            <param name="other_rev_reg_delta_json">Other rev reg delta json.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.IssuerMergeRevocationRegistryDeltasCompletedDelegate">
            <summary>
            Issuer merge revocation registry deltas completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_prover_create_master_secret(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverCreateMasterSecretCompletedDelegate)">
            <summary>
            Creates a master secret with a given name and stores it in the wallet.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="master_secret_id">a new master secret name</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverCreateMasterSecretCompletedDelegate">
            <summary>
            Prover create master secret completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_prover_create_credential_req(System.Int32,System.IntPtr,System.String,System.String,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverCreateCredentialReqCompletedDelegate)">
            <summary>
            Creates a clam request json for the given claim offer and stores it in a secure wallet.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="prover_did">a DID of the prover</param>
            <param name="cred_offer_json">claim offer as a json containing information about the issuer and a claim</param>
            <param name="cred_def_json">claim definition json associated with issuer_did and schema_seq_no in the claim_offer</param>
            <param name="master_secret_id">the name of the master secret stored in the wallet</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverCreateCredentialReqCompletedDelegate">
            <summary>
            Prover create credential req completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_prover_store_credential(System.Int32,System.IntPtr,System.String,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverStoreCredentialCompletedDelegate)">
            <summary>
            Indies the prover store credential.
            </summary>
            <returns>The prover store credential.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="cred_id">Cred identifier.</param>
            <param name="cred_req_json">Cred req json.</param>
            <param name="cred_req_metadata_json">Cred req metadata json.</param>
            <param name="cred_json">Cred json.</param>
            <param name="cred_def_json">Cred def json.</param>
            <param name="rev_reg_def_json">Rev reg def json.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverStoreCredentialCompletedDelegate">
            <summary>
            Prover store credential completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_prover_get_credentials(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverGetCredentialsCompletedDelegate)">
            <summary>
            Gets human readable claims according to the filter.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="filter_json">filter for claims</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverGetCredentialsCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_prover_get_claims function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="matched_credentials_json">claims json</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_prover_get_credentials_for_proof_req(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverGetCredentialsForProofCompletedDelegate)">
            <summary>
            Gets human readable claims matching the given proof request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="proof_request_json">proof request json</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverGetCredentialsForProofCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_prover_get_claims_for_proof_req function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="credentials_json">json with claims for the given pool request.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_prover_create_proof(System.Int32,System.IntPtr,System.String,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverCreateProofCompletedDelegate)">
            <summary>
            Indies the prover create proof.
            </summary>
            <returns>The prover create proof.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="proof_req_json">Proof req json.</param>
            <param name="requested_credentials_json">Requested credentials json.</param>
            <param name="master_secret_id">Master secret identifier.</param>
            <param name="schemas_json">Schemas json.</param>
            <param name="credential_defs_json">Credential defs json.</param>
            <param name="rev_states_json">Rev states json.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.ProverCreateProofCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_prover_create_proof function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="proof_json">Proof json.</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_verifier_verify_proof(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.VerifierVerifyProofCompletedDelegate)">
            <summary>
            Indies the verifier verify proof.
            </summary>
            <returns>The verifier verify proof.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="proof_request_json">Proof request json.</param>
            <param name="proof_json">Proof json.</param>
            <param name="schemas_json">Schemas json.</param>
            <param name="credential_defs_json">Credential defs json.</param>
            <param name="rev_reg_defs_json">Rev reg defs json.</param>
            <param name="rev_regs_json">Rev regs json.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.VerifierVerifyProofCompletedDelegate">
            <summary>
            Delegate for the function called back to by the indy_verifier_verify_proof function.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="valid">true if the proof is valid, otherwise false</param>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_create_revocation_state(System.Int32,System.Int32,System.String,System.String,System.Int64,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.CreateRevocationStateCompletedDelegate)">
            <summary>
            Indies the state of the create revocation.
            </summary>
            <returns>The create revocation state.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="blob_storage_reader_handle">BLOB storage reader handle.</param>
            <param name="rev_reg_def_json">Rev reg def json.</param>
            <param name="rev_reg_delta_json">Rev reg delta json.</param>
            <param name="timestamp">Timestamp.</param>
            <param name="cred_rev_id">Cred rev identifier.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.CreateRevocationStateCompletedDelegate">
            <summary>
            Create revocation state completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.NativeMethods.indy_update_revocation_state(System.Int32,System.Int32,System.String,System.String,System.String,System.Int64,System.String,Hyperledger.Indy.AnonCredsApi.NativeMethods.UpdateRevocationStateCompletedDelegate)">
            <summary>
            Indies the state of the update revocation.
            </summary>
            <returns>The update revocation state.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="blob_storage_reader_handle">BLOB storage reader handle.</param>
            <param name="rev_state_json">Rev state json.</param>
            <param name="rev_reg_def_json">Rev reg def json.</param>
            <param name="rev_reg_delta_json">Rev reg delta json.</param>
            <param name="timestamp">Timestamp.</param>
            <param name="cred_rev_id">Cred rev identifier.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.NativeMethods.UpdateRevocationStateCompletedDelegate">
            <summary>
            Update revocation state completed delegate.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.ProofRejectedException">
            <summary>
            Exception thrown when a proof has been rejected.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.ProofRejectedException.#ctor">
            <summary>
            Initializes a new ProofRejectedException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.ProverCreateCredentialRequestResult">
            <summary>
            Prover create credential request result.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.ProverCreateCredentialRequestResult.CredentialRequestJson">
            <summary>
            Gets the credential request json.
            </summary>
            <value>The credential request json.</value>
        </member>
        <member name="P:Hyperledger.Indy.AnonCredsApi.ProverCreateCredentialRequestResult.CredentialRequestMetadataJson">
            <summary>
            
            </summary>
            <value>The credential request metadata json.</value>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.ProverCreateCredentialRequestResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Hyperledger.Indy.AnonCredsApi.ProverCreateCredentialRequestResult"/> class.
            </summary>
            <param name="credentialRequestJson">Credential request json.</param>
            <param name="credentialRequestMetadataJson">Credential request metadata json.</param>
        </member>
        <member name="T:Hyperledger.Indy.AnonCredsApi.RevocationRegistryFullException">
            <summary>
            Exception thrown when attempting to use a full revocation registry.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.AnonCredsApi.RevocationRegistryFullException.#ctor">
            <summary>
            Initializes a new RevocationRegistryFullException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.BlobStorageApi.BlobStorage">
            <summary>
            BLOB storage.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.BlobStorageApi.BlobStorage.OpenReaderAsync(System.String,System.String)">
            <summary>
            Opens the BLOB storage reader async.
            </summary>
            <returns>The BLOB storage reader async.</returns>
            <param name="type">Type.</param>
            <param name="configJson">Config json.</param>
        </member>
        <member name="M:Hyperledger.Indy.BlobStorageApi.BlobStorage.OpenWriterAsync(System.String,System.String)">
            <summary>
            Opens the BLOB storage writer async.
            </summary>
            <returns>The BLOB storage writer async.</returns>
            <param name="type">Type.</param>
            <param name="configJson">Config json.</param>
        </member>
        <member name="T:Hyperledger.Indy.BlobStorageApi.BlobStorageReader">
            <summary>
            BLOB storage reader.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.BlobStorageApi.BlobStorageWriter">
            <summary>
            BLOB storage writer.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.Consts">
            <summary>
            PInvoke import of C-Callable SDK library functions and associated delegates.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.AuthDecryptResult">
            <summary>
            Auth decrypt result.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.AuthDecryptResult.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Hyperledger.Indy.CryptoApi.AuthDecryptResult"/> class.
            </summary>
            <param name="their_vk">Their vk.</param>
            <param name="messageData">Message data.</param>
        </member>
        <member name="P:Hyperledger.Indy.CryptoApi.AuthDecryptResult.MessageData">
            <summary>
            Gets the decrypted message.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.CryptoApi.AuthDecryptResult.TheirVk">
            <summary>
            Gets the sender verkey
            </summary>
            <value>Their verkey.</value>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.Crypto">
            <summary>
            Provides methods for pure cryptographic functions.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._createKeyCompletedCallback">
            <summary>
            Gets the callback to use when the indy_create_key command has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._getKeyMetadataCompletedCallback">
            <summary>
            Gets the callback to use when the indy_get_key_metadata command has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._cryptoSignCompletedCallback">
            <summary>
            Gets the callback to use when the indy_crypto_sign command has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._cryptoVerifyCompletedCallback">
            <summary>
            Gets the callback to use when the indy_crypto_verify command  has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._cryptoEncryptCompletedCallback">
            <summary>
            Gets the callback to use when indy_crypto_auth_crypt or indy_crypto_anon_crypt has completed
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._cryptoAuthDecryptCompletedCallback">
            <summary>
            Gets the callback to use when indy_crypto_auth_decrypt has completed
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.CryptoApi.Crypto._cryptoAnonDecryptCompletedCallback">
            <summary>
            Gets the callback to use when the indy_crypto_box_seal_open command has completed.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.CreateKeyAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Creates a key in the provided wallet.
            </summary>
            <remarks>
            The <paramref name="keyJson"/> parameter must contain a JSON object although all properties of the object are optional.  The schema
            the object must conform to are as follows:
            <code>
            {
                "seed": string, // Optional (if not set random one will be used); Seed information that allows deterministic key creation.
                "crypto_type": string, // Optional (if not set then ed25519 curve is used); Currently only 'ed25519' value is supported for this field.
            }
            </code>
            The <c>seed</c> member is optional and is used to specify the seed to use for key creation - if this parameter is not set then a random seed will be used.
            The <c>crypto_type</c> member is also optional and will default to ed25519 curve if not set.
            <note type="note">At present the crypto_type member only supports the value 'ed22519'.</note>
            </remarks>
            <param name="wallet">The wallet to create the key in.</param>
            <param name="keyJson">The JSON string describing the key.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a string containing the verification key of the generated key-pair.</returns>
            <exception cref="T:Hyperledger.Indy.InvalidStructureException">Thrown if the value passed to the <paramref name="keyJson"/> parameter is malformed or contains invalid data.</exception>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.SetKeyMetadataAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)">
            <summary>
            Sets user defined metadata for a key-pair in the specified wallet.
            </summary>
            <remarks>
            Any existing metadata stored for the key-pair will be replaced.
            </remarks>
            <param name="wallet">The wallet containing the key.</param>
            <param name="verKey">The verification key of the key pair.</param>
            <param name="metadata">The metadata to set.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation completes.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if the wallet does not contain a key-pair matching the provided <paramref name="verKey"/>.</exception>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.GetKeyMetadataAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets the user defined metadata stored against a key-pair in the specified wallet.
            </summary>
            <remarks>
            If no metadata is stored against the specified key-pair null will be returned.</remarks>
            <param name="wallet">The wallet containing the key-pair.</param>
            <param name="verKey">The verification key of the key-pair.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a string containing the metadata associated with the key-pair.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if the wallet does not contain a key-pair matching the provided <paramref name="verKey"/> or they key-pair has no metadata.</exception>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.SignAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.Byte[])">
            <summary>
            Signs the provided message with the provided key.
            </summary>
            <remarks>
            The key provided as the <paramref name="myVk"/> parameter must have previously been stored in the <paramref name="wallet"/> using
            the <see cref="M:Hyperledger.Indy.CryptoApi.Crypto.CreateKeyAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> method or the <see cref="M:Hyperledger.Indy.DidApi.Did.CreateAndStoreMyDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> method.
            <note type="note">
            To use DID keys with this method call the <see cref="M:Hyperledger.Indy.DidApi.Did.KeyForDidAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String)"/> with the desired DID to get 
            its verification key which can be used as the <paramref name="myVk"/> parameter when calling this method.
            </note>
            </remarks>
            <param name="wallet">The wallet containing the key-pair to sign with.</param>
            <param name="myVk">The verification key of the key-pair to sign with.</param>
            <param name="message">The message to sign</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a byte array containing the signature.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if <paramref name="myVk"/> is not present in the <paramref name="wallet"/>.</exception>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.VerifyAsync(System.String,System.Byte[],System.Byte[])">
            <summary>
            Verifies a message signature with a verification key.
            </summary>
            <note type="note">
            To use DID keys with this method call the <see cref="M:Hyperledger.Indy.DidApi.Did.KeyForDidAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String)"/> with the desired DID to get 
            its verification key which can be used as the <paramref name="theirVk"/> parameter when calling this method.
            </note>
            <param name="theirVk">The verification key belonging to the party that signed the message.</param>
            <param name="message">The message that was signed.</param>
            <param name="signature">The signature for the message.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that, when the operation completes, resolves to true if the signature was valid, otherwise false.</returns>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.AuthCryptAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.Byte[])">
            <summary>
            Encrypt a message by authenticated-encryption scheme.
            
            Sender can encrypt a confidential message specifically for Recipient, using Sender's public key.
            Using Recipient's public key, Sender can compute a shared secret key.
            Using Sender's public key and his secret key, Recipient can compute the exact same shared secret key.
            That shared secret key can be used to verify that the encrypted message was not tampered with,
            before eventually decrypting it.
            </summary>
            <remarks>Note to use DID keys with this function you can call indy_key_for_did to get key id (verkey)
            for specific DID.
            </remarks>
            <returns>The crypt async.</returns>
            <param name="wallet">The wallet containing the key-pair to sign with.</param>
            <param name="myVk"> id (verkey) of my key. The key must be created by calling indy_create_key or indy_create_and_store_my_did</param>
            <param name="theirVk">id (verkey) of their key</param>
            <param name="message">message data to be encrypted</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.AuthDecryptAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.Byte[])">
             <summary>
             Decrypt a message by authenticated-encryption scheme.
            
             Sender can encrypt a confidential message specifically for Recipient, using Sender's public key.
             Using Recipient's public key, Sender can compute a shared secret key.
             Using Sender's public key and his secret key, Recipient can compute the exact same shared secret key.
             That shared secret key can be used to verify that the encrypted message was not tampered with,
             before eventually decrypting it.
             </summary>
             <remarks>
             Note to use DID keys with this function you can call indy_key_for_did to get key id (verkey)
             for specific DID.
             </remarks>
             <returns>sender verkey and decrypted message</returns>
             <param name="wallet">The wallet containing the key-pair to sign with.</param>
             <param name="myVk">id (verkey) of my key. The key must be created by calling indy_create_key or indy_create_and_store_my_did</param>
             <param name="message">The message data to be decrypted.</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.AnonCryptAsync(System.String,System.Byte[])">
             <summary>
             Encrypts a message by anonymous-encryption scheme.
            
             Sealed boxes are designed to anonymously send messages to a Recipient given its public key.
             Only the Recipient can decrypt these messages, using its private key.
             While the Recipient can verify the integrity of the message, it cannot verify the identity of the Sender.
            
             Note to use DID keys with this function you can call indy_key_for_did to get key id (verkey)
             for specific DID.
             </summary>
             <returns>The crypt async.</returns>
             <param name="theirVk">id (verkey) of their key</param>
             <param name="message">Message to be encrypted</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.Crypto.AnonDecryptAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.Byte[])">
            <summary>
            Decrypts a message encrypted using an anonymous-encryption scheme
            </summary>
            <remarks>
            <para>
            Sealed boxes are designed to a <c>sender</c> to anonymously send messages to a <c>recipient</c> using the
            recipient's public key.
            Only the recipient can decrypt these messages, using their private key.
            While the recipient can verify the integrity of the message, they cannot verify the identity of the sender.
            </para>
            <note type="note">
            To use DID keys with this method call the <see cref="M:Hyperledger.Indy.DidApi.Did.KeyForDidAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String)"/> with the desired DID to get 
            its verification key which can be used as the <paramref name="myVk"/> parameter when calling this method.
            </note>
            </remarks>
            <param name="wallet">The wallet containing the key-pair associated with the verification key specified in the <paramref name="myVk"/> parameter.</param>
            <param name="myVk">The verification key of the intended recipient of the encrypted message.</param>
            <param name="encryptedMessage">The encrypted message to decrypt.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a byte array containing the decrypted message.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if <paramref name="myVk"/> is not present in the <paramref name="wallet"/>.</exception>
            <exception cref="T:Hyperledger.Indy.InvalidStructureException">Thrown if <paramref name="myVk"/> was not used to encrypt <paramref name="encryptedMessage"/>.</exception>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_create_key(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.CryptoApi.NativeMethods.CreateKeyCompletedDelegate)">
            <summary>
            Creates keys pair and stores in the wallet.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="key_json">Key information as json.</param>
            <param name="cb">Callback that takes command result as parameter.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.CreateKeyCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_create_key.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="verkey">The verification key of the generated key pair.</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_set_key_metadata(System.Int32,System.IntPtr,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Saves/replaces the meta information for the giving key in the wallet.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="verkey">the key (verkey, key id) to store metadata.</param>
            <param name="metadata">the meta information that will be store with the key.</param>
            <param name="cb">Callback that takes command result as parameter.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_get_key_metadata(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.CryptoApi.NativeMethods.GetKeyMetadataCompletedDelegate)">
            <summary>
            Retrieves the meta information for the giving key in the wallet.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="verkey">The key (verkey, key id) to retrieve metadata.</param>
            <param name="cb">Callback that takes command result as parameter.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.GetKeyMetadataCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_get_key_metadata.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="metadata">The metadata associated with the key-pair.</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_crypto_sign(System.Int32,System.IntPtr,System.String,System.Byte[],System.Int32,Hyperledger.Indy.CryptoApi.NativeMethods.SignCompletedDelegate)">
            <summary>
            Signs a message with a key.
            </summary>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="wallet_handle">wallet handler (created by open_wallet).</param>
            <param name="my_vk">id (verkey) of my key. The key must be created by calling indy_create_key or indy_create_and_store_my_did</param>
            <param name="message_raw">a pointer to first byte of message to be signed</param>
            <param name="message_len">a message length</param>
            <param name="cb">Callback that takes command result as parameter.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.SignCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_crypto_sign.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="signature_raw">A pointer to the signature data.</param>
            <param name="signature_len">The length of the signature data in bytes.</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_crypto_verify(System.Int32,System.String,System.Byte[],System.Int32,System.Byte[],System.Int32,Hyperledger.Indy.CryptoApi.NativeMethods.VerifyCompletedDelegate)">
            <summary>
            Verify a signature with a verkey.
            </summary>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="their_vk">verkey to use</param>
            <param name="message_raw">a pointer to first byte of message to be signed</param>
            <param name="message_len">message length</param>
            <param name="signature_raw">a pointer to first byte of signature to be verified</param>
            <param name="signature_len">signature length</param>
            <param name="cb">Callback that takes command result as parameter.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.VerifyCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_crypto_verify.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="valid">True if the signature is valid for the message, otherwise false.</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_crypto_auth_crypt(System.Int32,System.IntPtr,System.String,System.String,System.Byte[],System.Int32,Hyperledger.Indy.CryptoApi.NativeMethods.EncryptCompletedDelegate)">
            <summary>
            Encrypt a message by authenticated-encryption scheme.
            </summary>
            <returns>The crypto auth crypt.</returns>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="wallet_handle">wallet handler (created by open_wallet).</param>
            <param name="my_vk">id (verkey) of my key.</param>
            <param name="their_vk">id (verkey) of their key</param>
            <param name="msg_data">a pointer to first byte of message that to be encrypted</param>
            <param name="msg_len">message length</param>
            <param name="cb">Callback that takes command result as parameter.</param>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.EncryptCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_crypto_auth_crypt and indy_crypto_anon_crypt
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_crypto_auth_decrypt(System.Int32,System.IntPtr,System.String,System.Byte[],System.Int32,Hyperledger.Indy.CryptoApi.NativeMethods.AuthDecryptCompletedDelegate)">
            <summary>
            Decrypt a message by authenticated-encryption scheme.
            </summary>
            <returns>sender verkey and decrypted message</returns>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="wallet_handle">wallet handler (created by open_wallet).</param>
            <param name="my_vk">id (verkey) of my key.</param>
            <param name="encrypted_msg">Encrypted message.</param>
            <param name="encrypted_len">Encrypted length.</param>
            <param name="cb">Callback that takes command result as parameter.</param>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.AuthDecryptCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_crypto_auth_decrypt
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_crypto_anon_crypt(System.Int32,System.String,System.Byte[],System.Int32,Hyperledger.Indy.CryptoApi.NativeMethods.EncryptCompletedDelegate)">
            <summary>
            Encrypts a message by anonymous-encryption scheme.
            </summary>
            <returns>an encrypted message</returns>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="their_vk">id (verkey) of their key</param>
            <param name="msg_data">message data to be encrypted</param>
            <param name="msg_len">message length.</param>
            <param name="cb">Callback that takes command result as parameter.</param>
        </member>
        <member name="M:Hyperledger.Indy.CryptoApi.NativeMethods.indy_crypto_anon_decrypt(System.Int32,System.IntPtr,System.String,System.Byte[],System.Int32,Hyperledger.Indy.CryptoApi.NativeMethods.AnonDecryptCompletedDelegate)">
            <summary>
            Decrypts a message by anonymous-encryption scheme.
            </summary>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="wallet_handle">wallet handler (created by open_wallet).</param>
            <param name="my_vk">id (verkey) of my key. The key must be created by calling indy_create_key or indy_create_and_store_my_did</param>
            <param name="encrypted_msg">a pointer to first byte of message that to be decrypted</param>
            <param name="encrypted_len">message length</param>
            <param name="cb">Callback that takes command result as parameter.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.CryptoApi.NativeMethods.AnonDecryptCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_crypto_anon_decrypt.
            </summary>
            <param name="command_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="msg_data">A pointer to the decrypted message data.</param>
            <param name="msg_len">The length of the decrypted message data in bytes.</param>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult">
            <summary>
            Result of creating and storing my DID.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new CreateAndStoreMyDidResult.
            </summary>
            <param name="did">The DID created.</param>
            <param name="verKey">The verification key to use for verifying signatures.</param>
        </member>
        <member name="P:Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult.Did">
            <summary>
            Gets the DID.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult.VerKey">
            <summary>
            Gets the verification key.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.Did">
            <summary>
            Provides cryptographic functionality.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._createAndStoreMyDidCallback">
            <summary>
            Gets the callback to use when the command for CreateAndStoreMyDidResultAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._replaceKeysCallback">
            <summary>
            Gets the callback to use when the command for ReplaceKeysAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._keyForDidCompletedCallback">
            <summary>
            Gets the callback to use when the command for KeyForDidAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._keyForLocalDidCompletedCallback">
            <summary>
            Gets the callback to use when the command for KeyForLocalDidAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._getEndpointForDidCompletedCallback">
            <summary>
            Gets the callback to use when the command for GetEndpointForDidAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._getDidMetadataCompletedCallback">
            <summary>
            Gets the callback to use when the command for GetDidMetadataAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._getMyDidWithMetaCompletedCallback">
            <summary>
            Gets the callback to use when the command for GetMyDidWithMetaAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._listMyDidsWithMetaCompletedCallback">
            <summary>
            Gets the callback to use when the command for GetMyDidWithMetaAsync has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.DidApi.Did._abbreviateVerkeyCompletedCallback">
            <summary>
            Gets the callback to use when the command for AbbreviateVerkeyAsync has completed.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.CreateAndStoreMyDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Creates signing and encryption keys in specified wallet for a new DID owned by the caller.
            </summary>
            <remarks>
            <para>Saves the identity DID with keys in a wallet so that it can be used to sign
            and encrypt transactions.  Control over the created DID is provided through the 
            <paramref name="didJson"/> parameter which accepts a JSON string with the following
            optional parameters:
            </para>
            <code>
            {
                "did": string,
                "seed": string, 
                "crypto_type": string, 
                "cid": bool
            }
            </code>
            <para>The <c>did</c> member specifies the DID of the new entry.  If not 
            provided and the <c>cid</c> member is <c>false</c> then the first 16 bits of the VerKey value 
            generated will be used as a new DID.  If not provided and the <c>cid</c> member is <c>true</c> then the full 
            VerKey value will be used as a new DID.  If the <c>did</c> member is provided then the keys will be 
            replaced - this is normally used in the case of key rotation.</para>
            <para>The <c>seed</c> member specifies the seed to use when generating keys.  If not provided 
            then a random seed value will be created.</para>
            <para>The <c>crypto_type</c> member specifies the cryptographic algorithm used for generating
            keys.  If not provided then ed25519 curve is used.
            <note type="note">The only value currently supported for this member is 'ed25519'.</note>
            </para>
            <para>The <c>cid</c> member indicates whether the DID should be used in creating the DID.
            If not provided then the value defaults to false.</para>
            </remarks>
            <param name="wallet">The wallet to store the DID in.</param>
            <param name="didJson">The DID JSON.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult"/> when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.ReplaceKeysStartAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)">
            <summary>
            Generates new signing and encryption keys in the specified wallet for an existing DID owned by the caller
            </summary>
            <remarks>
            The developer has some control over the generation of the new keys through the value passed to
            the <paramref name="identityJson"/> parameter.  This parameter expects a valid JSON string
            with the following optional members:
            <code>
            {
                "seed": string, 
                "crypto_type": string
            }
            </code>
            <para>The <c>seed</c> member controls the seed that will be used to generate they keys.
            If not provided a random one will be created.</para>
            <para>The <c>crypto_type</c> member specifies the type of cryptographic algorithm will be 
            used to generate they keys.  If not provided then ed22519 curve will be used.
            <note type="note">The only value currently supported for this member is 'ed25519'.</note>
            </para>
            </remarks>
            <param name="wallet">The wallet the DID is stored in.</param>
            <param name="did">The did to replace the keys for.</param>
            <param name="identityJson">The identity information as JSON.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a string containing the new verification key when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.ReplaceKeysApplyAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Applies temporary signing and encryption keys as main in the specified wallet for an existing DID owned by the caller
            </summary>
            <param name="wallet">The wallet the DID is stored in.</param>
            <param name="did">The did to replace the keys for.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that  with no return value the completes when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.StoreTheirDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Stores a remote party's DID for a pairwise connection in the specified wallet.
            </summary>
            <remarks>
            <para>
            The DID and optional associated parameters must be provided in the <paramref name="identityJson"/>
            parameter as a JSON string:
            </para>
            <code>
            {
                   "did": string, 
                   "verkey": string,
                   "crypto_type": string
            }
            </code>
            <para>The <c>did</c> member specifies the DID to store.  This value is required.</para>
            <para>The <c>verkey</c> member specifies the verification key and is optional.</para>
            <para>The <c>crypto_type</c> member specifies the type of cryptographic algorithm will be 
            used to generate they keys.  If not provided then ed22519 curve will be used.
            <note type="note">The only value currently supported for this member is 'ed25519'.</note>
            </para>
            </remarks>
            <param name="wallet">The wallet to store the DID in.</param>
            <param name="identityJson">The identity JSON.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that  with no return value the completes when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.KeyForDidAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets the verification key for the specified DID.
            </summary>
            <remarks>
            If the provided <paramref name="wallet"/> does not contain the verification key associated with the specified DID then 
            an attempt will be made to look up the key from the provided <paramref name="pool"/>. If resolved from the <paramref name="pool"/>
            then the DID and key will be automatically cached in the <paramref name="wallet"/>.
            <note type="note">
            The <see cref="M:Hyperledger.Indy.DidApi.Did.CreateAndStoreMyDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> and <see cref="M:Hyperledger.Indy.CryptoApi.Crypto.CreateKeyAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> methods both create
            similar wallet records so the returned verification key in all generic crypto and messaging functions.
            </note>
            </remarks>
            <param name="pool">The pool to use for resolving the DID if it does not exist in the <paramref name="wallet"/>.</param>
            <param name="wallet">The wallet to resolve the DID from.</param>
            <param name="did">The DID to get the verification key for.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a string containing the verification key associated with the DID.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if the DID could not be resolved from the <paramref name="wallet"/> and <paramref name="pool"/>.</exception>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.KeyForLocalDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets the verification key for the specified DID.
            </summary>
            <remarks>
            This method will obtain the verification key associated with the specified <paramref name="did"/>from the provided <paramref name="wallet"/> but will
            not attempt to retrieve the key from the ledger if not present in the wallet, nor will it perform any freshness check against the ledger to determine 
            if the key is up-to-date.  To ensure that the key is fresh use the <see cref="M:Hyperledger.Indy.DidApi.Did.KeyForDidAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String)"/> method instead.
            <note type="note">
            The <see cref="M:Hyperledger.Indy.DidApi.Did.CreateAndStoreMyDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> and <see cref="M:Hyperledger.Indy.CryptoApi.Crypto.CreateKeyAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> methods both create
            similar wallet records so the returned verification key in all generic crypto and messaging functions.
            </note>
            </remarks>
            <param name="wallet">The wallet to resolve the DID from.</param>
            <param name="did">The DID to get the verification key for.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a string containing the verification key associated with the DID.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if the DID could not be resolved from the <paramref name="wallet"/>.</exception>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.SetEndpointForDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String)">
            <summary>
            Sets the endpoint details for the specified DID.
            </summary>
            <param name="wallet">The wallet containing the DID.</param>
            <param name="did">The DID to set the endpoint details on.</param>
            <param name="address">The address of the endpoint.</param>
            <param name="transportKey">The transport key.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation completes.</returns>
            <exception cref="T:Hyperledger.Indy.InvalidStructureException">Thrown if the <paramref name="did"/> or <paramref name="transportKey"/> values are malformed.</exception>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.GetEndpointForDidAsync(Hyperledger.Indy.WalletApi.Wallet,Hyperledger.Indy.PoolApi.Pool,System.String)">
            <summary>
            Gets the endpoint details for the specified DID.
            </summary>
            <remarks>
            If the <paramref name="did"/> is present in the <paramref name="wallet"/> and is considered "fresh" then
            the endpoint will be resolved from the wallet.  If, on the other hand, the DID is not present in the wallet or
            is not fresh then the details will be resolved from the <paramref name="pool"/> and will be cached in the wallet.
            </remarks>
            <param name="wallet">The wallet containing the DID.</param>
            <param name="pool">The pool to resolve the endpoint data from if not present in the wallet.</param>
            <param name="did">The DID to get the endpoint data for.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to an <see cref="T:Hyperledger.Indy.DidApi.EndpointForDidResult"/> containing the endpoint information 
            associated with the DID.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.SetDidMetadataAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)">
            <summary>
            Sets metadata for the specified DID.
            </summary>
            <remarks>
            Any existing metadata stored for the DID will be replaced.
            </remarks>
            <param name="wallet">The wallet containing the DID.</param>
            <param name="did">The DID to set the metadata on.</param>
            <param name="metadata">The metadata to store.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation completes.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if the <paramref name="wallet"/> does not contain the specified <paramref name="did"/>.</exception>
            <exception cref="T:Hyperledger.Indy.InvalidStructureException">Thrown if the value provided to the <paramref name="did"/> parameter is malformed.</exception>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.GetDidMetadataAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets the metadata associated with the specified DID.
            </summary>
            <param name="wallet">The wallet that contains the DID.</param>
            <param name="did">The DID to get the metadata for.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a string containing the metadata associated with the DID.</returns>
            <exception cref="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">Thrown if the wallet does not contain the specified <paramref name="did"/> or the DID did not have any metadata.</exception>
            <exception cref="T:Hyperledger.Indy.InvalidStructureException">Thrown if the value provided in the <paramref name="did"/> parameter is malformed.</exception>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.GetMyDidWithMetaAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Get info about My DID in format: DID, verkey, metadata
            </summary>
            <returns>The my did with meta async.</returns>
            <param name="wallet">Wallet.</param>
            <param name="myDid">My did.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.ListMyDidsWithMetaAsync(Hyperledger.Indy.WalletApi.Wallet)">
            <summary>
            Lists created DIDs with metadata as JSON array with each DID in format: DID, verkey, metadata
            </summary>
            <returns>The my dids with meta async.</returns>
            <param name="wallet">Wallet.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.Did.AbbreviateVerkeyAsync(System.String,System.String)">
            <summary>
            Retrieves abbreviated verkey if it is possible otherwise return full verkey.
            </summary>
            <returns>The verkey async.</returns>
            <param name="did">Did.</param>
            <param name="fullVerkey">Full verkey.</param>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.EncryptResult">
            <summary>
            The result of encryption.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.EncryptResult.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new EncryptionResult.
            </summary>
            <param name="encryptedMsg">The encrypted message.</param>
            <param name="nonce">The nonce.</param>
        </member>
        <member name="P:Hyperledger.Indy.DidApi.EncryptResult.EncryptedMsg">
            <summary>
            Gets the encrypted message.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.DidApi.EncryptResult.Nonce">
            <summary>
            Gets the nonce.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.EndpointForDidResult">
            <summary>
            Result of getting the endpoint for a DID.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.EndpointForDidResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new EndpointForDidResult.
            </summary>
            <param name="address">The address.</param>
            <param name="transportKey">The transport verification key.</param>
        </member>
        <member name="P:Hyperledger.Indy.DidApi.EndpointForDidResult.Address">
            <summary>
            Gets the address.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.DidApi.EndpointForDidResult.TransportKey">
            <summary>
            Gets the transport verification key.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_create_and_store_my_did(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.DidApi.NativeMethods.CreateAndStoreMyDidCompletedDelegate)">
            <summary>
            Creates keys (signing and encryption keys) for a new
            DID (owned by the caller of the library).
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet)</param>
            <param name="did_json">Identity information as json.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.CreateAndStoreMyDidCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_create_and_store_my_did.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="did">The created DID.</param>
            <param name="verkey">The verification key for the signature.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_replace_keys_start(System.Int32,System.IntPtr,System.String,System.String,Hyperledger.Indy.DidApi.NativeMethods.ReplaceKeysStartCompletedDelegate)">
            <summary>
            Generates new keys (signing and encryption keys) for an existing
            DID (owned by the caller of the library).
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="did">Id of Identity stored in secured Wallet.</param>
            <param name="identity_json">Identity information as json.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.ReplaceKeysStartCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_replace_keys_start.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="verkey">The key for verification of signature.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_replace_keys_apply(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Apply temporary keys as main for an existing DID (owned by the caller of the library).
            </summary>
            <param name="command_handle">command handle to map callback to user context.</param>
            <param name="wallet_handle">wallet handler (created by open_wallet).</param>
            <param name="did">Id of Identity stored in secured Wallet.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_store_their_did(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Saves their DID for a pairwise connection in a secured Wallet,
            so that it can be used to verify transaction.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet)</param>
            <param name="identity_json">Identity information as json.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_key_for_did(System.Int32,System.IntPtr,System.IntPtr,System.String,Hyperledger.Indy.DidApi.NativeMethods.DidKeyForDidCompletedDelegate)">
            <summary>
            Returns ver key (key id) for the given DID.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="pool_handle">Pool handle (created by open_pool).</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="did">The DID to resolve key.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.DidKeyForDidCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_key_for_did.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="key">The verification key associated with the DID.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_key_for_local_did(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.DidApi.NativeMethods.DidKeyForLocalDidCompletedDelegate)">
            <summary>
            Returns ver key (key id) for the given DID.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="did">The DID to get the key for.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.DidKeyForLocalDidCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_key_for_local_did.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="key">The key associated with the DID.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_set_endpoint_for_did(System.Int32,System.IntPtr,System.String,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Sets the endpoint information for the given DID.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="did">The DID to resolve endpoint.</param>
            <param name="address">The address of the endpoint.</param>
            <param name="transport_key">The key for the transport.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_get_endpoint_for_did(System.Int32,System.IntPtr,System.IntPtr,System.String,Hyperledger.Indy.DidApi.NativeMethods.DidGetEndpointForDidCompletedDelegate)">
            <summary>
            Gets the endpoint information for the given DID.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="pool_handle">Pool handle (created by open_pool).</param>
            <param name="did">The DID to set the endpoint on.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.DidGetEndpointForDidCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_get_endpoint_for_did.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="address">The endpoint address associated with the DID.</param>
            <param name="transport_vk">The transport verification key associated with the DID.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_set_did_metadata(System.Int32,System.IntPtr,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Saves/replaces the meta information for the giving DID in the wallet.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="did">the DID to store metadata.</param>
            <param name="metadata">the meta information that will be store with the DID.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_get_did_metadata(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.DidApi.NativeMethods.DidGetDidMetadataCompletedDelegate)">
            <summary>
            Retrieves the meta information for the giving DID in the wallet.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="wallet_handle">Wallet handle (created by open_wallet).</param>
            <param name="did">The DID to retrieve metadata.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.DidGetDidMetadataCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_get_did_metadata.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="metadata">The metadata associated with the DID.</param>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_get_my_did_with_meta(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.DidApi.NativeMethods.GetMyDidWithMetaCompletedDelegate)">
            <summary>
            Get info about My DID in format: DID, verkey, metadata
            </summary>
            <returns>The get my did with meta.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="my_did">My did.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.GetMyDidWithMetaCompletedDelegate">
            <summary>
            Delegate to be used on comletion of calls to indy_get_my_did_with_meta
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_list_my_dids_with_meta(System.Int32,System.IntPtr,Hyperledger.Indy.DidApi.NativeMethods.ListMyDidsWithMetaCompletedDelegate)">
            <summary>
            Lists created DIDs with metadata as JSON array with each DID in format: DID, verkey, metadata
            </summary>
            <returns>The list my dids with meta.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="wallet_handle">Wallet handle.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.ListMyDidsWithMetaCompletedDelegate">
            <summary>
            Delegate to be used on comletion of calls to indy_list_my_dids_with_meta
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.NativeMethods.indy_abbreviate_verkey(System.Int32,System.String,System.String,Hyperledger.Indy.DidApi.NativeMethods.AbbreviateVerkeyCompletedDelegate)">
            <summary>
            Retrieves abbreviated verkey if it is possible otherwise return full verkey.
            </summary>
            <returns>The abbreviate verkey.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="did">Did.</param>
            <param name="full_verkey">Full verkey.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.NativeMethods.AbbreviateVerkeyCompletedDelegate">
            <summary>
            Delegate to be used on comletion of calls to indy_abbreviate_verkey
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.DidApi.UnknownCryptoException">
            <summary>
            Exception thrown when an unknown crypto format is used for DID entity keys.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.DidApi.UnknownCryptoException.#ctor">
            <summary>
            Initializes a new UnknownCryptoException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.ErrorCode">
            <summary>
            Error codes
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.Success">
            <summary>
            Call succeeded.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam1">
            <summary>
            Caller passed invalid value as param 1 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam2">
            <summary>
            Caller passed invalid value as param 2 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam3">
            <summary>
            Caller passed invalid value as param 3 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam4">
            <summary>
            Caller passed invalid value as param 4 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam5">
            <summary>
            Caller passed invalid value as param 5 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam6">
            <summary>
            Caller passed invalid value as param 6 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam7">
            <summary>
            Caller passed invalid value as param 7 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam8">
            <summary>
            Caller passed invalid value as param 8 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam9">
            <summary>
            Caller passed invalid value as param 9 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam10">
            <summary>
            Caller passed invalid value as param 10 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam11">
            <summary>
            Caller passed invalid value as param 11 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidParam12">
            <summary>
            Caller passed invalid value as param 12 (null, invalid json and etc..)
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidState">
            <summary>
            Invalid library state was detected in runtime. It signals library bug
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonInvalidStructure">
            <summary>
            Object (json, config, key, claim and etc...) passed by library caller has invalid structure
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.CommonIOError">
            <summary>
            IO Error
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletInvalidHandle">
            <summary>
            Caller passed invalid wallet handle
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletUnknownTypeError">
            <summary>
            Unknown type of wallet was passed on create_wallet
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletTypeAlreadyRegisteredError">
            <summary>
            Attempt to register already existing wallet type
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletAlreadyExistsError">
            <summary>
            Attempt to create wallet with name used for another exists wallet
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletNotFoundError">
            <summary>
            Requested entity id isn't present in wallet
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletIncompatiblePoolError">
            <summary>
            Trying to use wallet with pool that has different name
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.WalletAlreadyOpenedError">
            <summary>
            Trying to open wallet that was opened already
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.PoolLedgerNotCreatedError">
            <summary>
            Trying to open pool ledger that wasn't created before
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.PoolLedgerInvalidPoolHandle">
            <summary>
            Caller passed invalid pool ledger handle
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.PoolLedgerTerminated">
            <summary>
            Pool ledger terminated
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.LedgerNoConsensusError">
            <summary>
            No consensus during ledger operation
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.LedgerInvalidTransaction">
            <summary>
            Attempt to send unknown or incomplete transaction message
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.LedgerSecurityError">
            <summary>
            Attempt to send transaction without the necessary privileges
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.PoolLedgerConfigAlreadyExistsError">
            <summary>
            Attempt to create pool ledger config with name used for another existing pool
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.PoolLedgerTimeout">
            <summary>
            Pool ledger timeout
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsRevocationRegistryFullError">
            <summary>
            Revocation registry is full and creation of new registry is necessary
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsInvalidUserRevocIndex">
            <summary>
            Invalid user revocation index
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsAccumulatorIsFull">
            <summary>
            Accumulator is full
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsNotIssuedError">
            <summary>
            Not issued error
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsMasterSecretDuplicateNameError">
            <summary>
            Attempt to generate master secret with duplicated name
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsProofRejected">
            <summary>
            Proof rejected
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.AnoncredsClaimRevoked">
            <summary>
            Claim revoked
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.ErrorCode.SignusUnknownCryptoError">
            <summary>
            Unknown format of DID entity keys
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.IndyException">
            <summary>
            Exception indicating a problem originating from the Indy SDK.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.IndyException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new IndyException with the specified message and SDK error code.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="sdkErrorCode">The SDK error code for the exception.</param>
        </member>
        <member name="M:Hyperledger.Indy.IndyException.FromSdkError(System.Int32)">
            <summary>
            Generates an IndyException or one of its subclasses from the provided SDK error code.
            </summary>
            <param name="sdkErrorCode">The error code.</param>
            <returns>An IndyException or subclass instance.</returns>
        </member>
        <member name="P:Hyperledger.Indy.IndyException.SdkErrorCode">
            <summary>
            Gets the error code for the exception.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.InvalidParameterException">
            <summary>
            Exception indicating that one of the parameters provided to an SDK call contained a valid that was considered invalid.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.InvalidParameterException.GetParamIndex(System.Int32)">
            <summary>
            Gets the index of the parameter from the SDK error code.
            </summary>
            <param name="sdkErrorCode">The SDK error code.</param>
            <returns>The parameter index the SDK indicated was invalid.</returns>
        </member>
        <member name="M:Hyperledger.Indy.InvalidParameterException.BuildMessage(System.Int32)">
            <summary>
            Builds the error message from the SDK error code.
            </summary>
            <param name="sdkErrorCode">Teh SDK error code.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Hyperledger.Indy.InvalidParameterException.#ctor(System.Int32)">
            <summary>
            Initializes a new InvalidParameterException from the specified SDK error code.
            </summary>
            <param name="sdkErrorCode">The SDK error code that specifies which parameter was invalid.</param>
        </member>
        <member name="P:Hyperledger.Indy.InvalidParameterException.ParameterIndex">
            <summary>
            Gets the index of the parameter that contained the invalid value.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.InvalidStateException">
            <summary>
            Exception indicating that the SDK library experienced an unexpected internal error.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.InvalidStateException.#ctor">
            <summary>
            Initializes a new InvalidStateException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.InvalidStructureException">
            <summary>
            Exception indicating that a value being processed was not considered a valid value.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.InvalidStructureException.#ctor">
            <summary>
            Initializes a new InvalidStructureException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.IOException">
            <summary>
            Exception indicating that an IO error occurred.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.IOException.#ctor">
            <summary>
            Initializes a new IOException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.InvalidLedgerTransactionException">
            <summary>
            Exception thrown when attempting to send an unknown or incomplete ledger message.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.InvalidLedgerTransactionException.#ctor">
            <summary>
            Initializes a new InvalidLedgerTransactionException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.Ledger">
            <summary>
            Provides methods for building messages suitable for submission to the ledger and
            methods for signing and submitting messages to the ledger.
            </summary>
            <remarks>
            <para>
            This class provides methods for generating messages for submission to the ledger; each 
            of these methods is prefixed with the word 'Build' and returns a JSON message which must be 
            signed and submitted to a node pool. These messages can be submitted to the ledger using the 
            <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SignAndSubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)"/> or can be signed first 
            using the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SignRequestAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)"/> method then submitted later 
            using the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,System.String)"/> method.
            </para>
            </remarks>
        </member>
        <member name="F:Hyperledger.Indy.LedgerApi.Ledger.NYM_ROLE_STEWARD">
            <summary>
            The 'Steward' NYM role.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.LedgerApi.Ledger.NYM_ROLE_TRUSTEE">
            <summary>
            The 'Trustee' NYM role.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.LedgerApi.Ledger.NYM_ROLE_TRUST_ANCHOR">
            <summary>
            The 'Trust Anchor' NYM role.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.LedgerApi.Ledger._submitRequestCallback">
            <summary>
            Gets the callback to use when a command that submits a message to the ledger completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.LedgerApi.Ledger._buildRequestCallback">
            <summary>
            Gets the callback to use when a command that builds a request completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.LedgerApi.Ledger._signRequestCallback">
            <summary>
            Gets the callback to use when the command for SignRequestAsync has completed.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.SignRequestAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)">
            <summary>
            Signs a request message.
            </summary>
            <remarks>
            This method adds information associated with the submitter specified by the
            <paramref name="submitterDid"/> to the JSON provided in the <paramref name="requestJson"/> parameter
            then signs it with the submitter's signing key from the provided wallet.
            </remarks>
            <param name="wallet">The wallet to use for signing.</param>
            <param name="submitterDid">The DID of the submitter identity in the provided wallet.</param>
            <param name="requestJson">The request JSON to sign.</param>
            <returns>An asynchronous task that resolves to a <see cref="T:System.String"/> containing the signed 
            message.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.SignAndSubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)">
            <summary>
            Signs and submits a request to the validator pool.
            </summary>
            <remarks>
            This method adds information associated with the submitter specified by the
            <paramref name="submitterDid"/> to the JSON provided in the <paramref name="requestJson"/> parameter
            then signs it with the submitter's signing key from the provided <paramref name="wallet"/> and sends the signed 
            request message to the specified validator <paramref name="pool"/>.   
            </remarks>
            <param name="pool">The validator pool to submit the request to.</param>
            <param name="wallet">The wallet containing the submitter keys to sign the request with.</param>
            <param name="submitterDid">The DID of the submitter identity.</param>
            <param name="requestJson">The request JSON to sign and submit.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a JSON <see cref="T:System.String"/> 
            containing the result of submission when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.SubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,System.String)">
            <summary>
            Submits a request to the ledger.
            </summary>
            <remarks>
            This method publishes a message to the validator pool specified in the <paramref name="pool"/> parameter as-is 
            and assumes that the message was previously prepared for submission.  Requests can be signed prior to using this 
            call to the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SignRequestAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)"/> method, or messages can be 
            both signed and submitted using the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SignAndSubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)"/>
            method.
            </remarks>
            <param name="pool">The validator pool to submit the request to.</param>
            <param name="requestJson">The request to submit.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a JSON <see cref="T:System.String"/> 
            containing the results when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetDdoRequestAsync(System.String,System.String)">
            <summary>
            Builds a ledger request to get a DDO.
            </summary>
            <remarks>
            <para>
            This message builds a request message that is suitable for requesting a DDO from the ledger.
            </para>
            <para>
            The resulting message can be submitted to the ledger using the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SignAndSubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)"/>
            method or can be signed first using the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SignRequestAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)"/> 
            method then submitted later using the <see cref="M:Hyperledger.Indy.LedgerApi.Ledger.SubmitRequestAsync(Hyperledger.Indy.PoolApi.Pool,System.String)"/> method.
            </para>        
            </remarks>
            <param name="submitterDid">The DID of the party who will submit the request to the ledger.</param>
            <param name="targetDid">The DID of the DDO to get from the ledger.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildNymRequestAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds a ledger request to store a NYM.
            </summary>
            <remarks>
            <para>
            Builds a request message that is suitable for storing a NYM for the <paramref name="targetDid"/>
            on the ledger.
            </para>
            <para>
            Only the <paramref name="submitterDid"/> and <paramref name="targetDid"/> parameters
            are required, however the other parameters provide greater control over the process.  Normally
            the <paramref name="targetDid"/> and <paramref name="verKey"/> parameters would be from values
            generated by a prior call to <see cref="M:Hyperledger.Indy.DidApi.Did.CreateAndStoreMyDidAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/>.
            </para>
            <para>
            The <paramref name="role"/> parameter dictates what permissions the NYM will have - valid values
            are 'STEWARD' and 'TRUSTEE' and 'TRUST_ANCHOR'.
            </para>
            </remarks>
            <param name="submitterDid">The DID of the party who will submit the request to the ledger.</param>
            <param name="targetDid">The DID the NYM belongs to.</param>
            <param name="verKey">The verification key for the NYM.</param>
            <param name="alias">The alias for the NYM.</param>
            <param name="role">The role of the NYM.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildAttribRequestAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds a ledger request for storing an ATTRIB.
            </summary>
            <remarks>
            <para>
            Builds a request message that is suitable for setting an attribute on the ledger.
            </para>
            <para>
            The <paramref name="submitterDid"/>, <paramref name="targetDid"/> are mandatory and
            any one of the <paramref name="hash"/>, <paramref name="raw"/> or <paramref name="enc"/> 
            parameters must also be provided, depending on what type of data should be stored.
            </para>
            </remarks>
            <param name="submitterDid">The DID of the party that will submit the request to the ledger.</param>
            <param name="targetDid">The DID the ATTRIB will belong to.</param>
            <param name="hash">The hash of the ATTRIB data.</param>
            <param name="raw">The raw JSON attribute data.</param>
            <param name="enc">The encrypted attribute data.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetAttribRequestAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds a GET_ATTRIB ledger request.
            </summary>
            <remarks>
            <para>
            Builds a request message that is suitable for requesting an attribute from the 
            ledger.
            </para>
            </remarks>
            <param name="submitterDid">The DID of the submitter.</param>
            <param name="targetDid">The target DID.</param>
            <param name="raw">The name of the attribute to get.</param>
            <param name="hash"></param>
            <param name="enc"></param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetNymRequestAsync(System.String,System.String)">
            <summary>
            Builds a GET_NYM ledger request.
            </summary>
            <remarks>
            <para>
            Builds a request message that is suitable for requesting a NYM from the 
            ledger.
            </para>
            </remarks>
            <param name="submitterDid">The DID of the party submitting the request.</param>
            <param name="targetDid">The target DID.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildSchemaRequestAsync(System.String,System.String)">
            <summary>
            Builds a SCHEMA ledger request to store a schema.
            </summary>
            <remarks>
            <para>
            Builds a request message that is suitable for storing a schema on a 
            ledger.  Schema specify the data types and formats which are used to make up claims.
            </para>
            <para>
            The <paramref name="data"/> parameter must contain a JSON string with the members "name",
            "version" and "attr_names" that define the schema.  For example the following JSON describes
            a schema with the name "access" that is version 1.0 of the schema and specifies the attributes
            "ip", "port", and "keys":
            <code>
            {
                "name":"access",
                "version":"1.0",
                "attr_names":["ip","port","keys"]
            }
            </code>
            </para>
            </remarks>
            <param name="submitterDid">The DID of the submitter.</param>
            <param name="data">The JSON schema.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetSchemaRequestAsync(System.String,System.String)">
            <summary>
            Builds a SCHEMA request. Request to add Credential's schema.
            </summary>
            <returns>The get schema request async.</returns>
            <param name="submitterDid">DID of the submitter stored in secured Wallet..</param>
            <param name="schemaId">Schema ID in ledger</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.ParseGetSchemaResponseAsync(System.String)">
            <summary>
            Parse a GET_SCHEMA response to get Schema in the format compatible with Anoncreds API.
            </summary>
            <returns>
            Schema Id and Schema json.
            {
                id: identifier of schema
                attrNames: array of attribute name strings
                name: Schema's name string
                version: Schema's version string
                ver: Version of the Schema json
            }</returns>
            <param name="getSchemaResponse">response of GET_SCHEMA request.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildCredDefRequestAsync(System.String,System.String)">
            <summary>
            Builds an CRED_DEF request. Request to add a credential definition (in particular, public key),
            that Issuer creates for a particular Credential Schema.
            </summary>
            <returns>The cred def txn async.</returns>
            <param name="submitterDid">DID of the submitter stored in secured Wallet.</param>
            <param name="data">Credential definition json</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetCredDefRequestAsync(System.String,System.String)">
            <summary>
            Builds a GET_CRED_DEF request.Request to get a credential definition (in particular, public key),
            that Issuer creates for a particular Credential Schema.
            </summary>
            <returns>The get cred def request async.</returns>
            <param name="submitterDid">Submitter did.</param>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.ParseGetCredDefResponseAsync(System.String)">
            <summary>
            Parse a GET_CRED_DEF response to get Credential Definition in the format compatible with Anoncreds API.
            </summary>
            <returns>The get cred def response async.</returns>
            <param name="getCredDefResponse">Get cred def response.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildNodeRequestAsync(System.String,System.String,System.String)">
            <summary>
            Builds a NODE ledger request.
            </summary>
            <param name="submitterDid">The DID of the submitter.</param>
            <param name="targetDid">The target DID.</param>
            <param name="data">id of a target NYM record</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetTxnRequestAsync(System.String,System.Int32)">
            <summary>
            Builds a GET_TXN request
            </summary>
            <param name="submitterDid">The DID of the submitter.</param>
            <param name="data">seq_no of transaction in ledger</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:System.String"/> 
            containing the request JSON. </returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildPoolConfigRequestAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds a POOL_CONFIG request.
            </summary>
            <returns>Request result as json.</returns>
            <param name="submitterDid">Id of Identity stored in secured Wallet.</param>
            <param name="writes">If set to <c>true</c> writes.</param>
            <param name="force">If set to <c>true</c> force.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildPoolUpgradeRequestAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds a POOL_UPGRADE request.
            </summary>
            <returns>Request result as json.</returns>
            <param name="submitterDid">Submitter did.</param>
            <param name="name">Name.</param>
            <param name="version">Version.</param>
            <param name="action">Either start or cancel</param>
            <param name="sha256">Sha256.</param>
            <param name="timeout">Timeout.</param>
            <param name="schedule">Schedule.</param>
            <param name="justification">Justification.</param>
            <param name="reinstall">If set to <c>true</c> reinstall.</param>
            <param name="force">If set to <c>true</c> force.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildRevocRegDefRequestAsync(System.String,System.String)">
            <summary>
            Builds a REVOC_REG_DEF request. Request to add the definition of revocation registry
            to an exists credential definition.
            </summary>
            <returns>The revoc reg def request async.</returns>
            <param name="submitterDid">DID of the submitter stored in secured Wallet.</param>
            <param name="data">
            data: Revocation Registry data:
                {
                    "id": string - ID of the Revocation Registry,
                    "revocDefType": string - Revocation Registry type (only CL_ACCUM is supported for now),
                    "tag": string - Unique descriptive ID of the Registry,
                    "credDefId": string - ID of the corresponding CredentialDefinition,
                    "value": Registry-specific data {
                        "issuanceType": string - Type of Issuance(ISSUANCE_BY_DEFAULT or ISSUANCE_ON_DEMAND),
                        "maxCredNum": number - Maximum number of credentials the Registry can serve.
                        "tailsHash": string - Hash of tails.
                        "tailsLocation": string - Location of tails file.
                        "publicKeys": &lt;public_keys> - Registry's public key.
                    },
                    "ver": string - version of revocation registry definition json.
                }.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetRevocRegDefRequestAsync(System.String,System.String)">
            <summary>
            Builds a GET_REVOC_REG_DEF request. Request to get a revocation registry definition,
            that Issuer creates for a particular Credential Definition.
            </summary>
            <returns>Request result as json.</returns>
            <param name="submitterDid">DID of the read request sender..</param>
            <param name="id">ID of Revocation Registry Definition in ledger..</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.ParseGetRevocRegDefResponseAsync(System.String)">
            <summary>
            Parse a GET_REVOC_REG_DEF response to get Revocation Registry Definition in the format
            compatible with Anoncreds API.
            </summary>
            <returns>
            Revocation Registry Definition Id and Revocation Registry Definition json.
            {
                "id": string - ID of the Revocation Registry,
                "revocDefType": string - Revocation Registry type (only CL_ACCUM is supported for now),
                "tag": string - Unique descriptive ID of the Registry,
                "credDefId": string - ID of the corresponding CredentialDefinition,
                "value": Registry-specific data {
                    "issuanceType": string - Type of Issuance(ISSUANCE_BY_DEFAULT or ISSUANCE_ON_DEMAND),
                    "maxCredNum": number - Maximum number of credentials the Registry can serve.
                    "tailsHash": string - Hash of tails.
                    "tailsLocation": string - Location of tails file.
                    "publicKeys": &lt;public_keys> - Registry's public key.
                },
                "ver": string - version of revocation registry definition json.
            }.</returns>
            <param name="getRevocRegDefResponse">response of GET_REVOC_REG_DEF request..</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildRevocRegEntryRequestAsync(System.String,System.String,System.String,System.String)">
             <summary>
             Builds a REVOC_REG_ENTRY request.  Request to add the RevocReg entry containing
             the new accumulator value and issued/revoked indices.
             This is just a delta of indices, not the whole list.
             So, it can be sent each time a new credential is issued/revoked.
             </summary>
             <returns>The revoc reg entry request async.</returns>
             <param name="submitterDid">DID of the submitter stored in secured Wallet.</param>
             <param name="revocRegDefId">ID of the corresponding RevocRegDef.</param>
             <param name="revDefType">Revocation Registry type (only CL_ACCUM is supported for now).</param>
             <param name="value">
             Registry-specific data: {
                 value: {
                     prevAccum: string - previous accumulator value.
                     accum: string - current accumulator value.
                     issued: array&lt;number> - an array of issued indices.
                     revoked: array&lt;number> an array of revoked indices.
                 },
                 ver: string - version revocation registry entry json
            
             }.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetRevocRegRequestAsync(System.String,System.String,System.Int64)">
            <summary>
            Builds a GET_REVOC_REG request. Request to get the accumulated state of the Revocation Registry
            by ID. The state is defined by the given timestamp.
            </summary>
            <returns>Request result as json..</returns>
            <param name="submitterDid">DID of the read request sender.</param>
            <param name="revocRegDefId">ID of the corresponding Revocation Registry Definition in ledger.</param>
            <param name="timestamp">Requested time represented as a total number of seconds from Unix Epoch</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.ParseGetRevocRegResponseAsync(System.String)">
            <summary>
            Parse a GET_REVOC_REG response to get Revocation Registry in the format compatible with Anoncreds API.
            </summary>
            <returns>
            Revocation Registry Definition Id, Revocation Registry json and Timestamp.
            {
                "value": Registry-specific data {
                    "accum": string - current accumulator value.
                },
                "ver": string - version revocation registry json
            }
            </returns>
            <param name="getRevocRegResponse">response of GET_REVOC_REG request.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.BuildGetRevocRegDeltaRequestAsync(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Builds a GET_REVOC_REG_DELTA request. Request to get the delta of the accumulated state of the Revocation Registry.
            The Delta is defined by from and to timestamp fields.
            If from is not specified, then the whole state till to will be returned.
            </summary>
            <returns>Request result as json.</returns>
            <param name="submitterDid">DID of the read request sender.</param>
            <param name="revocRegDefId">ID of the corresponding Revocation Registry Definition in ledger.</param>
            <param name="from">Requested time represented as a total number of seconds from Unix Epoch.</param>
            <param name="to">Requested time represented as a total number of seconds from Unix Epoch.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.Ledger.ParseGetRevocRegDeltaResponseAsync(System.String)">
            <summary>
            Parse a GET_REVOC_REG_DELTA response to get Revocation Registry Delta in the format compatible with Anoncreds API.
            </summary>
            <returns>
            Revocation Registry Definition Id, Revocation Registry Delta json and Timestamp.
            {
                "value": Registry-specific data {
                    prevAccum: string - previous accumulator value.
                    accum: string - current accumulator value.
                    issued: array&lt;number> - an array of issued indices.
                    revoked: array&lt;number> an array of revoked indices.
                },
                "ver": string - version revocation registry delta json
            }</returns>
            <param name="getRevocRegDeltaResponse">response of GET_REVOC_REG_DELTA request.</param>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.LedgerConsensusException">
            <summary>
            Exception thrown when the no consensus was reached during a ledger operation.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.LedgerConsensusException.#ctor">
            <summary>
            Initializes a new LedgerConsensusException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.LedgerSecurityException">
            <summary>
            Exception thrown when attempting to send a transaction without the necessary privileges.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.LedgerSecurityException.#ctor">
            <summary>
            Initializes a new LedgerSecurityException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.NativeMethods.SubmitRequestCompletedDelegate">
            <summary>
            Delegate for callbacks used by functions that submit requests to the ledger.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="request_result_json">The result data.</param>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate">
            <summary>
            Delegate for callbacks used by functions that build requests destined for the ledger.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="request_json">The request that can be signed and submitted to the ledger.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_sign_and_submit_request(System.Int32,System.IntPtr,System.IntPtr,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.SubmitRequestCompletedDelegate)">
            <summary>
            Signs and submits request message to validator pool.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="pool_handle">pool handle (created by open_pool_ledger).</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="request_json">Request data json.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_submit_request(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.SubmitRequestCompletedDelegate)">
            <summary>
            Publishes request message to validator pool (no signing, unlike sign_and_submit_request).
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="pool_handle">pool handle (created by open_pool_ledger).</param>
            <param name="request_json">Request data json.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_sign_request(System.Int32,System.IntPtr,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.SignRequestCompletedDelegate)">
            <summary>
            Signs a request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle.</param>
            <param name="submitter_did">The DID of the submitter.</param>
            <param name="request_json">The request to sign.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.NativeMethods.SignRequestCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_sign_request.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="signed_request_json">The signed request data.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_get_ddo_request(System.Int32,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a request to get a DDO.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="target_did">Id of Identity stored in secured Wallet.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_nym_request(System.Int32,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a NYM request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="target_did">Id of Identity stored in secured Wallet.</param>
            <param name="verkey">verification key</param>
            <param name="alias">Alias.</param>
            <param name="role">Role of a user NYM record</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_attrib_request(System.Int32,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds an ATTRIB request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="target_did">Id of Identity stored in secured Wallet.</param>
            <param name="hash">Hash of attribute data</param>
            <param name="raw">represented as json, where key is attribute name and value is it's value</param>
            <param name="enc">Encrypted attribute data</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_get_attrib_request(System.Int32,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a GET_ATTRIB request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="target_did">Id of Identity stored in secured Wallet.</param>
            <param name="raw"> name (attribute name)</param>
            <param name="hash"></param>
            <param name="enc"></param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_get_nym_request(System.Int32,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a GET_NYM request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="target_did">Id of Identity stored in secured Wallet.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_schema_request(System.Int32,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a SCHEMA request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="data"> name, version, type, attr_names (ip, port, keys)</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_get_schema_request(System.Int32,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Indies the build get schema request.
            </summary>
            <returns>The build get schema request.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="submitter_did">Submitter did.</param>
            <param name="id">Identifier.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_parse_get_schema_response(System.Int32,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.ParseResponseCompletedDelegate)">
            <summary>
            Indies the parse get schema response.
            </summary>
            <returns>The parse get schema response.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="get_schema_response">Get schema response.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.NativeMethods.ParseResponseCompletedDelegate">
            <summary>
            Parse response completed delegate.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.NativeMethods.ParseRegistryResponseCompletedDelegate">
            <summary>
            Parse registry response completed delegate.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_cred_def_request(System.Int32,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Indies the build cred def request.
            </summary>
            <returns>The build cred def request.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="submitter_did">Submitter did.</param>
            <param name="data">Data.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_get_cred_def_request(System.Int32,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Indies the build get cred def request.
            </summary>
            <returns>The build get cred def request.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="submitter_did">Submitter did.</param>
            <param name="id">Identifier.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_parse_get_cred_def_response(System.Int32,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.ParseResponseCompletedDelegate)">
            <summary>
            Indies the parse get cred def response.
            </summary>
            <returns>The parse get cred def response.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="get_cred_def_response">Get cred def response.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_node_request(System.Int32,System.String,System.String,System.String,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a NODE request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="target_did">Id of Identity stored in secured Wallet.</param>
            <param name="data">id of a target NYM record</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_get_txn_request(System.Int32,System.String,System.Int32,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a GET_TXN request.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="seq_no">seq_no of transaction in ledger</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_pool_config_request(System.Int32,System.String,System.Boolean,System.Boolean,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a POOL_CONFIG request.
            </summary>
            <returns>Request result as json.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="submitter_did">Id of Identity stored in secured Wallet.</param>
            <param name="writes">If set to <c>true</c> writes.</param>
            <param name="force">If set to <c>true</c> force.</param>
            <param name="cb">Callback that takes command result as parameter..</param>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.NativeMethods.indy_build_pool_upgrade_request(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,Hyperledger.Indy.LedgerApi.NativeMethods.BuildRequestCompletedDelegate)">
            <summary>
            Builds a POOL_UPGRADE request.
            </summary>
            <returns>Request result as json.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="submitter_did">Submitter did.</param>
            <param name="name">Name.</param>
            <param name="version">Version.</param>
            <param name="action">Either start or cancel.</param>
            <param name="sha256">Sha256.</param>
            <param name="timeout">Timeout.</param>
            <param name="schedule">Schedule.</param>
            <param name="justification">Justification.</param>
            <param name="reinstall">If set to <c>true</c> reinstall.</param>
            <param name="force">If set to <c>true</c> force.</param>
            <param name="cb">Callback that takes command result as parameter..</param>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.ParseRegistryResponseResult">
            <summary>
            Parse registry response result.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.LedgerApi.ParseRegistryResponseResult.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Hyperledger.Indy.LedgerApi.ParseRegistryResponseResult.ObjectJson">
            <summary>
            Gets the object json.
            </summary>
            <value>The object json.</value>
        </member>
        <member name="P:Hyperledger.Indy.LedgerApi.ParseRegistryResponseResult.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.ParseRegistryResponseResult.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Hyperledger.Indy.LedgerApi.ParseRegistryResponseResult"/> class.
            </summary>
            <param name="id">Identifier.</param>
            <param name="objectJson">Object json.</param>
            <param name="timestamp">Timestamp.</param>
        </member>
        <member name="T:Hyperledger.Indy.LedgerApi.ParseResponseResult">
            <summary>
            Parse response result.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.LedgerApi.ParseResponseResult.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Hyperledger.Indy.LedgerApi.ParseResponseResult.ObjectJson">
            <summary>
            Gets the object json.
            </summary>
            <value>The object json.</value>
        </member>
        <member name="M:Hyperledger.Indy.LedgerApi.ParseResponseResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hyperledger.Indy.LedgerApi.ParseResponseResult"/> class.
            </summary>
            <param name="id">Identifier.</param>
            <param name="objectJson">Object json.</param>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.NativeMethods.indy_is_pairwise_exists(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.PairwiseApi.NativeMethods.IsPairwiseExistsCompletedDelegate)">
            <summary>
            Checks whether a pairwise exists.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="their_did">encrypted DID</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.PairwiseApi.NativeMethods.IsPairwiseExistsCompletedDelegate">
            <summary>
            Delegate for pairwise exists that indicates whether or not a pairwise exists.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="exists">Whether or not the pairwise exists.</param>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.NativeMethods.indy_create_pairwise(System.Int32,System.IntPtr,System.String,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Creates pairwise.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="their_did">encrypted DID</param>
            <param name="my_did">encrypted DID</param>
            <param name="metadata">Optional: extra information for pairwise</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.NativeMethods.indy_list_pairwise(System.Int32,System.IntPtr,Hyperledger.Indy.PairwiseApi.NativeMethods.ListPairwiseCompletedDelegate)">
            <summary>
            Get list of saved pairwise.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.PairwiseApi.NativeMethods.ListPairwiseCompletedDelegate">
            <summary>
            Delegate for listing saved pairwise.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="list_pairwise">list of saved pairwise</param>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.NativeMethods.indy_get_pairwise(System.Int32,System.IntPtr,System.String,Hyperledger.Indy.PairwiseApi.NativeMethods.GetPairwiseCompletedDelegate)">
            <summary>
            Gets pairwise information for specific their_did.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="their_did">encrypted DID</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.PairwiseApi.NativeMethods.GetPairwiseCompletedDelegate">
            <summary>
            Delegate for getting a saved pairwise.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="pairwise_info_json">did info associated with their did</param>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.NativeMethods.indy_set_pairwise_metadata(System.Int32,System.IntPtr,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Save some data in the Wallet for pairwise associated with Did.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="wallet_handle">wallet handle (created by open_wallet).</param>
            <param name="their_did">encrypted DID</param>
            <param name="metadata">some extra information for pairwise</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.PairwiseApi.Pairwise">
            <summary>
            Provides methods for managing pairwise identifiers.
            </summary>
            <remarks>
            A Pairwise is a record of the relationship between a DID owned by the caller of the API and
            one belonging to another party, referred to respectively in this API  as <c>myDID</c>and <c>theirDID</c>.
            Pairwise records can also hold additional optional metadata.
            </remarks>
        </member>
        <member name="F:Hyperledger.Indy.PairwiseApi.Pairwise._isPairwiseExistsCallback">
            <summary>
            Gets the callback to use when the IsExistsAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.PairwiseApi.Pairwise._listPairwiseCallback">
            <summary>
            Gets the callback to use when the ListAsync command completes.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.PairwiseApi.Pairwise._getPairwiseCallback">
            <summary>
            Gets the callback to use when the GetAsync command completes.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.Pairwise.IsExistsAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets whether or not a pairwise record exists in the provided wallet for the specified DID .
            </summary>
            <param name="wallet">The wallet to check for a pairwise record.</param>
            <param name="theirDid">The DID to check.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to true if a pairwise exists for the 
            DID, otherwise false.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.Pairwise.CreateAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String,System.String)">
            <summary>
            Creates a new pairwise record between two specified DIDs in the provided wallet.
            </summary>
            <param name="wallet">The wallet to store create the pairwise record in.</param>
            <param name="theirDid">The DID of the remote party.</param>
            <param name="myDid">The DID belonging to the owner of the wallet.</param>
            <param name="metadata">Optional metadata to store with the record.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> completes once the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.Pairwise.ListAsync(Hyperledger.Indy.WalletApi.Wallet)">
            <summary>
            Lists all pairwise relationships stored in the specified wallet.
            </summary>
            <remarks>
            The JSON string that this method resolves to will contain a array of objects each of which
            describes a pairwise record for two DIDs, a DID belonging to the record owner (my_did) and the 
            associated DID belonging to the other party (their_did).
            
            <code>
            [
                {"my_did":"my_did_for_A","their_did":"A's_did_for_me"},
                {"my_did":"my_did_for_B","their_did":"B's_did_for_me"}
                ...
            ]
            </code>
            
            Note that this call does not return any metadata associated with the pairwise records; to get the
            metadata use the <see cref="M:Hyperledger.Indy.PairwiseApi.Pairwise.GetAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)"/> method.
            </remarks>
            <param name="wallet">The wallet to get the pairwise records from.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a JSON string containing
            an array of all pairwise relationships stored in the wallet.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.Pairwise.GetAsync(Hyperledger.Indy.WalletApi.Wallet,System.String)">
            <summary>
            Gets the pairwise record associated with the specified DID from the provided wallet.
            </summary>
            <remarks>
            The JSON string that this method resolves to will contain a single pairwise record for two DIDs, 
            the DID belonging to the record owner (my_did), the associated DID belonging to the other party 
            (their_did) and any metadata associated with the record (metadata).
            
            <code>
            [
                {"my_did":"my_did_for_A","their_did":"A's_did_for_me","metadata":"some metadata"},
                {"my_did":"my_did_for_B","their_did":"B's_did_for_me"}
                ...
            ]
            </code>
            
            Note that if no metadata is present in a record the JSON will omit the <c>metadata</c>key.
            </remarks>
            <param name="wallet">The wallet to get the pairwise record from.</param>
            <param name="theirDid">The DID belonging to another party to get the pairwise record for.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a JSON string containing
            a pairwise record.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PairwiseApi.Pairwise.SetMetadataAsync(Hyperledger.Indy.WalletApi.Wallet,System.String,System.String)">
            <summary>
            Sets the metadata on the existing pairwise record for the specified DID in the provided wallet.
            </summary>
            <remarks>
            If the pairwise record already contains any existing metadata it will be replaced with the value provided 
            in the <paramref name="metadata"/> parameter.  To remove all metadata for a record provide <c>null</c> in the
            <paramref name="metadata"/> parameter.
            </remarks>
            <param name="wallet">The wallet containing the pairwise record.</param>
            <param name="theirDid">The DID belonging to another party the pairwise record exists for.</param>
            <param name="metadata">The metadata to set on the pairwise record.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> completes once the operation completes.</returns>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.InvalidPoolException">
            <summary>
            Exception thrown when attempting to use a pool that has been closed or is invalid.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.InvalidPoolException.#ctor">
            <summary>
            Initializes a new PoolClosedException.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.NativeMethods.indy_create_pool_ledger_config(System.Int32,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Creates a new local pool ledger configuration that can be used later to connect pool nodes.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="config_name">Name of the pool ledger configuration.</param>
            <param name="config">Pool configuration json. if NULL, then default config will be used.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.NativeMethods.indy_delete_pool_ledger_config(System.Int32,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Deletes created pool ledger configuration.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="config_name">Name of the pool ledger configuration to delete.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.NativeMethods.indy_open_pool_ledger(System.Int32,System.String,System.String,Hyperledger.Indy.PoolApi.NativeMethods.OpenPoolLedgerCompletedDelegate)">
            <summary>
            Opens pool ledger and performs connecting to pool nodes.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="config_name">Name of the pool ledger configuration.</param>
            <param name="config">Runtime pool configuration json. If null the default configuration will be used.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.NativeMethods.OpenPoolLedgerCompletedDelegate">
            <summary>
            Delegate to be uses on completion of calls to indy_open_pool_ledger.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="pool_handle">The handle for the opened pool.</param>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.NativeMethods.indy_refresh_pool_ledger(System.Int32,System.IntPtr,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Refreshes a local copy of a pool ledger and updates pool nodes connections.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="handle">Pool handle returned by indy_open_pool_ledger</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.NativeMethods.indy_close_pool_ledger(System.Int32,System.IntPtr,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Closes opened pool ledger, opened nodes connections and frees allocated resources.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="handle">pool handle returned by indy_open_pool_ledger.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.NativeMethods.indy_list_pools(System.Int32,Hyperledger.Indy.PoolApi.NativeMethods.ListPoolsCompletedDelegate)">
            <summary>
            Lists names of created pool ledgers
            </summary>
            <returns>The list pools.</returns>
            <param name="command_handle">Command handle.</param>
            <param name="cb">Cb.</param>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.NativeMethods.ListPoolsCompletedDelegate">
            <summary>
            Delegate to be uses on completion of calls to indy_list_pools.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.Pool">
            <summary>
            Represents a connection to a pool of ledger nodes and provides static methods for managing
            connections to pools.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.PoolApi.Pool._openPoolLedgerCallback">
            <summary>
            Callback to use when a pool open command has completed.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.PoolApi.Pool._listPoolsCallback">
            <summary>
            Callback to use when list pools command has completed.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.CreatePoolLedgerConfigAsync(System.String,System.String)">
            <summary>
            Creates a new local pool configuration with the specified name that can be used later to open a connection to 
            pool nodes.
            </summary>
            <remarks>
            <para>
            If the configuration specified in the <paramref name="config"/> parameter is null then the 
            default configuration will be used, however if specified the value should adhere to the following
            JSON format:
            <code>
            {
                "genesis_txn": "path/to/genesis/transaction/file"
            }
            </code>
            If the value of the <c>genesis_txn</c> key in the JSON is null then a default file will be
            used.  If the file specified does not exist it will be created.
            </para>
            </remarks>
            <seealso cref="M:Hyperledger.Indy.PoolApi.Pool.OpenPoolLedgerAsync(System.String,System.String)"/>
            <seealso cref="M:Hyperledger.Indy.PoolApi.Pool.DeletePoolLedgerConfigAsync(System.String)"/>
            <param name="configName">The name for the configuration.</param>
            <param name="config">The configuration JSON.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> with no return value that completes when
            the configuration is created.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.DeletePoolLedgerConfigAsync(System.String)">
            <summary>
            Deletes an existing pool configuration.
            </summary>
            <seealso cref="M:Hyperledger.Indy.PoolApi.Pool.CreatePoolLedgerConfigAsync(System.String,System.String)"/>
            <param name="configName">The name of the configuration to delete.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> with no return value that completes when
            the configuration is deleted.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.OpenPoolLedgerAsync(System.String,System.String)">
            <summary>
            Opens a pool and connects to the ledger nodes.
            </summary>
            <remarks>
            A Pool cannot be opened unless the a pool configuration with the specified name was previously
            configured using the <see cref="M:Hyperledger.Indy.PoolApi.Pool.CreatePoolLedgerConfigAsync(System.String,System.String)"/> method.
            
            When opening a pool the runtime configuration can be specified using the <paramref name="config"/>
            parameter, which expects a JSON string with the following format:
            
            <code>
            {
                "refresh_on_open": bool (optional), Forces pool ledger to be refreshed immediately after opening.
                                 Defaults to true.
                "auto_refresh_time": int (optional), After this time in minutes pool ledger will be automatically refreshed.
                                   Use 0 to disable automatic refresh. Defaults to 24*60.
                "network_timeout": int (optional), Network timeout for communication with nodes in milliseconds.
                                  Defaults to 20000.
            }
            </code>
            
            If the <paramref name="config"/> parameter is null then the default configuration will be used.
            
            <note type="note">Attempting to open a pool with the same name more than once will result in an error.</note>
            </remarks>
            <param name="configName">The name of the pool configuration to use.</param>
            <param name="config">The runtime configuration to use.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a Pool instance once the pool is opened.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.ListPoolsAsync">
            <summary>
            Lists names of created pool ledgers
            </summary>
            <returns>The pools json.</returns>
        </member>
        <member name="F:Hyperledger.Indy.PoolApi.Pool._requiresClose">
            <summary>
            Whether or not the close function has been called.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.PoolApi.Pool.Handle">
            <summary>
            Gets the handle for the pool.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.#ctor(System.IntPtr)">
            <summary>
            Initializes a new Pool instance with the specified handle.
            </summary>
            <param name="handle">The handle of the underlying unmanaged pool.</param>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.RefreshAsync">
            <summary>
            Refreshes a local copy of the pool and updates the pool's node connections.
            </summary>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.CloseAsync">
            <summary>
            Closes the pool.
            </summary>
            <remarks>
            <note type="note">Once a Pool instance is closed it cannot be opened again.  Instead call the 
            <see cref="M:Hyperledger.Indy.PoolApi.Pool.OpenPoolLedgerAsync(System.String,System.String)"/> method to open a new Pool instance.</note>
            </remarks>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.Dispose">
            <summary>
            Disposes of resources.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.Pool.Finalize">
            <summary>
            Finalizes the resource during GC if it hasn't been already.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.PoolConfigNotCreatedException">
            <summary>
            Exception thrown when attempting to open pool which does not yet have a created configuration.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.PoolConfigNotCreatedException.#ctor">
            <summary>
            Initializes a new PoolConfigNotCreatedException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.PoolLedgerConfigExistsException">
            <summary>
            Exception thrown when attempting to create a pool ledger config with same name as an existing pool ledger config.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.PoolLedgerConfigExistsException.#ctor">
            <summary>
            Initializes a new PoolLedgerConfigExistsException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.PoolApi.PoolLedgerTerminatedException">
            <summary>
            Exception thrown when the pool ledger was terminated.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.PoolApi.PoolLedgerTerminatedException.#ctor">
            <summary>
            Initializes a new PoolLedgerTerminatedException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate">
            <summary>
            Delegate for callbacks that only include the success or failure of command execution.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
        </member>
        <member name="F:Hyperledger.Indy.Utils.CallbackHelper.TaskCompletingNoValueCallback">
            <summary>
            Gets the callback to use for completing tasks that don't return a value.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.Utils.CallbackHelper.NoValueCallback">
            <summary>
            Gets the callback to use for functions that don't return a value and are not associated with a task.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.Utils.CallbackHelper.CheckResult(System.Int32)">
            <summary>
            Checks the result from a Sovrin function call.
            </summary>
            <exception cref="T:Hyperledger.Indy.IndyException">If the result is not a success result a SovrinException will be thrown.</exception>
            <param name="result">The result to check.</param>
        </member>
        <member name="M:Hyperledger.Indy.Utils.CallbackHelper.CheckCallback``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Int32)">
            <summary>
            Checks the result of a callback made by the Sovrin library.
            </summary>
            <typeparam name="T">The type the promise will return.</typeparam>
            <param name="taskCompletionSource">The source controlling the async result.</param>
            <param name="errorCode">The error code returned to the callback by the indy function.</param>
            <returns>true if the error code was success, otherwise false.</returns>
            <exception cref="T:Hyperledger.Indy.IndyException">If the errorCode is not a success result a SovrinException will be thrown.</exception>
        </member>
        <member name="M:Hyperledger.Indy.Utils.CallbackHelper.CheckCallback(System.Int32)">
            <summary>
            Checks the result of a callback made by the Sovrin library.
            </summary>
            <param name="errorCode">The error code returned to the callback by the indy function.</param>
            <exception cref="T:Hyperledger.Indy.IndyException">If the errorCode is not a success result a SovrinException will be thrown.</exception>
        </member>
        <member name="T:Hyperledger.Indy.Utils.ParamGuard">
            <summary>
            Common guards.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.Utils.ParamGuard.NotNull(System.Object,System.String)">
            <summary>
            Guards against null values.
            </summary>
            <param name="param">The parameter to check.</param>
            <param name="paramName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if param was null.</exception>
        </member>
        <member name="M:Hyperledger.Indy.Utils.ParamGuard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Guards against null and strings containing nothing but whitepsace.
            </summary>
            <param name="param">The parameter to check.</param>
            <param name="paramName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException">Thrown if param was null or contained whitespace.</exception>
        </member>
        <member name="T:Hyperledger.Indy.Utils.PendingCommands">
            <summary>
            Holder for pending commands.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.Utils.PendingCommands._nextCommandHandle">
            <summary>
            The next command handle to use.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.Utils.PendingCommands.GetNextCommandHandle">
            <summary>
            Gets the next command handle.
            </summary>
            <returns>The next command handle.</returns>
        </member>
        <member name="F:Hyperledger.Indy.Utils.PendingCommands._taskCompletionSources">
            <summary>
            Gets the map of command handles and their task completion sources.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.Utils.PendingCommands.Add``1(System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Adds a new TaskCompletionSource to track.
            </summary>
            <typeparam name="T">The type of the TaskCompletionSource result.</typeparam>
            <param name="taskCompletionSource">The TaskCompletionSource to track.</param>
            <returns>The command handle to use for tracking the task completion source.</returns>
        </member>
        <member name="M:Hyperledger.Indy.Utils.PendingCommands.Remove``1(System.Int32)">
            <summary>
            Gets and removes a TaskCompletionResult from tracking.
            </summary>
            <typeparam name="T">The type of the TaskCompletionResult that was tracked.</typeparam>
            <param name="commandHandle">The command handle used for tracking the TaskCompletionResult.</param>
            <returns>The TaskCompletionResult associated with the command handle.</returns>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.DuplicateWalletTypeException">
            <summary>
            Exception thrown when registering a wallet type that has already been registered.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.DuplicateWalletTypeException.#ctor">
            <summary>
            Initializes a new DuplicateWalletTypeException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.ICustomWallet">
            <summary>
            Features all custom wallets must implement.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.ICustomWallet.Set(System.String,System.String)">
            <summary>
             Allows an implementer to set a value in the wallet.
            </summary>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.ICustomWallet.Get(System.String,System.String@)">
            <summary>
            Allows an implementer to get a value from the wallet.
            </summary>
            <remarks>
            If the key does not exist the method should return <see cref="F:Hyperledger.Indy.ErrorCode.WalletNotFoundError"/>.
            </remarks>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value obtained from the wallet.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.ICustomWallet.GetNotExpired(System.String,System.String@)">
            <summary>
            Allows an implementer to get a value from the wallet if it has not expired.
            </summary>
            <remarks>
            If the key does not exist or the record associated with the key has
            expired then the method should return <see cref="F:Hyperledger.Indy.ErrorCode.WalletNotFoundError"/>.
            </remarks>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value obtained from the wallet.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.ICustomWallet.List(System.String,System.String@)">
            <summary>
            Allows an implementer to get a list of values from the wallet that match a key prefix.
            </summary>
            <remarks>
            The method should return a JSON string that conforms to the following format:
            <code>
            {
                "values":[
                    {"key":"key_1", "value":"value_1"}, 
                    ...
                ]
            }
            </code>
            If no values matching the <paramref name="keyPrefix"/> parameter are found the <c>values</c> 
            array in the JSON should be empty.
            </remarks>
            <param name="keyPrefix">The key prefix for the values requested.</param>
            <param name="valuesJson">The JSON string containing the values associated with the key prefix.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.InvalidWalletException">
            <summary>
            Exception thrown when an attempt is made to use a closed or invalid wallet.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.InvalidWalletException.#ctor">
            <summary>
            Initializes a new WalletClosedException.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.NativeMethods.indy_register_wallet_type(System.Int32,System.String,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeCreateDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeOpenDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeSetDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeGetDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeGetNotExpiredDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeListDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeCloseDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeDeleteDelegate,Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeFreeDelegate,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Registers custom wallet implementation.
            </summary>
            <param name="command_handle">Command handle to map callback to caller context.</param>
            <param name="xtype">Wallet type name.</param>
            <param name="create">WalletType create operation handler</param>
            <param name="open">WalletType open operation handler</param>
            <param name="set">Wallet set operation handler</param>
            <param name="get">Wallet get operation handler</param>
            <param name="get_not_expired">Wallet get_not_expired operation handler</param>
            <param name="list">Wallet list operation handler</param>
            <param name="close">Wallet close operation handler</param>
            <param name="delete">WalletType delete operation handler</param>
            <param name="free">Handler that allows to de-allocate strings allocated in caller code</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeCreateDelegate">
            <summary>
            Delegate for the function called back to when a wallet of a custom type is created.
            </summary>
            <param name="name">The name of the wallet.</param>
            <param name="config">The configuration of the wallet.</param>
            <param name="credentials">The credentials for the wallet.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeOpenDelegate">
            <summary>
            Delegate for the function called back to when a wallet of a custom type is opened.
            </summary>
            <param name="name">The name of the wallet to open.</param>
            <param name="config">The configuration for the wallet.</param>
            <param name="runtime_config">The runtime configuration for the wallet.</param>
            <param name="credentials">The credentials of the wallet.</param>
            <param name="handle">A handle to use when tracking the wallet instance.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeSetDelegate">
            <summary>
            Delegate for the function called back to when value is set on a wallet of a custom type.
            </summary>
            <param name="handle">The handle of the wallet instance the action is being performed on.</param>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeGetDelegate">
            <summary>
            Delegate for the function called back to when value is requested from a wallet of a custom type.
            </summary>
            <param name="handle">The handle of the wallet instance the action is being performed on.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value_ptr">The pointer to the value associated with the key.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeGetNotExpiredDelegate">
            <summary>
            Delegate for the function called back to when an unexpired value is requested from a wallet of a custom type.
            </summary>
            <param name="handle">The handle of the wallet instance the action is being performed on.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value_ptr">The pointer to the value associated with the key.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeListDelegate">
            <summary>
            Delegate for the function called back to when an list of values is requested from a wallet of a custom type.
            </summary>
            <param name="handle">The handle of the wallet instance the action is being performed on.</param>
            <param name="keyPrefix">The key prefix for the values requested.</param>
            <param name="values_json_ptr">The pointer to the values associated with the key prefix.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeCloseDelegate">
            <summary>
            Delegate for the function called back to when a wallet of a custom type is closed.
            </summary>
            <param name="handle">The handle of the wallet instance the action is being performed on.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeDeleteDelegate">
            <summary>
            Delegate for the function called back to when a wallet of a custom type is deleted.
            </summary>
            <param name="name">The name of the wallet being deleted</param>
            <param name="config">The configuration of the wallet.</param>
            <param name="credentials">The credentials of the wallet.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.WalletTypeFreeDelegate">
            <summary>
            Delegate for the function called back to when a value in a  wallet of a custom type is freed.
            </summary>
            <param name="handle">The handle of the wallet the action is being performed on.</param>
            <param name="value">A pointer to the value to be freed.</param>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.NativeMethods.indy_create_wallet(System.Int32,System.String,System.String,System.String,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Creates a new secure wallet with the given unique name.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="pool_name">Name of the pool that corresponds to this wallet.</param>
            <param name="name">Name of the wallet.</param>
            <param name="xtype">Type of the wallet. Defaults to 'default'.</param>
            <param name="config">Wallet configuration json.</param>
            <param name="credentials">Wallet credentials json. </param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.NativeMethods.indy_open_wallet(System.Int32,System.String,System.String,System.String,Hyperledger.Indy.WalletApi.NativeMethods.OpenWalletCompletedDelegate)">
            <summary>
            Opens the wallet with specific name.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="name">Name of the wallet.</param>
            <param name="runtime_config">Runtime wallet configuration json. if NULL, then default runtime_config will be used. </param>
            <param name="credentials">Wallet credentials json.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <remarks>
            Wallet with corresponded name must be previously created with indy_create_wallet method.
            It is impossible to open wallet with the same name more than once.
            </remarks>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.OpenWalletCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_open_wallet.
            </summary>
            <param name="xcommand_handle">The handle for the command that initiated the callback.</param>
            <param name="err">The outcome of execution of the command.</param>
            <param name="wallet_handle">The handle for the opened wallet.</param>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.NativeMethods.indy_close_wallet(System.Int32,System.IntPtr,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Closes opened wallet and frees allocated resources.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="handle">wallet handle returned by indy_open_wallet.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.NativeMethods.indy_delete_wallet(System.Int32,System.String,System.String,Hyperledger.Indy.Utils.CallbackHelper.IndyMethodCompletedDelegate)">
            <summary>
            Deletes created wallet.
            </summary>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="name">Name of the wallet to delete.</param>
            <param name="credentials">Wallet credentials json</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
            <returns>0 if the command was initiated successfully.  Any non-zero result indicates an error.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.NativeMethods.indy_list_wallets(System.Int32,Hyperledger.Indy.WalletApi.NativeMethods.ListWalletsCompletedDelegate)">
            <summary>
            Lists created wallets as JSON array with each wallet metadata: name, type, name of associated pool
            </summary>
            <returns>The list wallets.</returns>
            <param name="command_handle">The handle for the command that will be passed to the callback.</param>
            <param name="cb">The function that will be called when the asynchronous call is complete.</param>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.NativeMethods.ListWalletsCompletedDelegate">
            <summary>
            Delegate to be used on completion of calls to indy_list_wallets.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.UnknownWalletTypeException">
            <summary>
            Exception thrown when attempting to open a wallet with a type that has not been registered.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.UnknownWalletTypeException.#ctor">
            <summary>
            Initializes a new UnknownWalletTypeException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.Wallet">
            <summary>
            Represents a wallet that stores key value records and provides static methods for managing
            wallets.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.WalletApi.Wallet._registeredWalletTypes">
            <summary>
            Wallet type registrations by type name.
            </summary>
        </member>
        <member name="F:Hyperledger.Indy.WalletApi.Wallet._openWalletCallback">
            <summary>
            Gets the callback to use when a wallet open command has completed.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.RegisterWalletTypeAsync(System.String,Hyperledger.Indy.WalletApi.WalletType)">
            <summary>
            Registers a custom wallet type implementation.
            </summary>
            <remarks>
            <para>This method allows custom wallet implementations to be registered at runtime so that alternatives
            to the default wallet type can be used.  Implementing a custom wallet is achieved by
            deriving from the <see cref="T:Hyperledger.Indy.WalletApi.WalletType"/> class - see the <see cref="T:Hyperledger.Indy.WalletApi.WalletType"/> and 
            <see cref="T:Hyperledger.Indy.WalletApi.ICustomWallet"/> classes for further detail.
            </para>
            <para>Each custom wallet type is registered with a name which can subsequently be used when 
            creating a new wallet using the <see cref="M:Hyperledger.Indy.WalletApi.Wallet.CreateWalletAsync(System.String,System.String,System.String,System.String,System.String)"/> method.
            </para>
            </remarks>
            <param name="typeName">The name of the custom wallet type.</param>
            <param name="walletType">An instance of a class derived from <see cref="T:Hyperledger.Indy.WalletApi.WalletType"/> containing the logic for 
            the custom wallet type.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> with no return value that completes when
            the registration is complete.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.CreateWalletAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new wallet.
            </summary>
            <remarks>
            <para>Each created wallet is given a name which is then subsequently used to open it
            with the <see cref="M:Hyperledger.Indy.WalletApi.Wallet.OpenWalletAsync(System.String,System.String,System.String)"/> or delete it using the
            <see cref="M:Hyperledger.Indy.WalletApi.Wallet.DeleteWalletAsync(System.String,System.String)"/> static methods.    
            <note type="note">Wallet names must be unique within a pool.</note>
            </para>
            <para>
            When creating a new Wallet the <paramref name="type"/> parameter can be null or "default" to
            use the default wallet implementation, or a type name specified in an earlier call to the 
            <see cref="M:Hyperledger.Indy.WalletApi.Wallet.RegisterWalletTypeAsync(System.String,Hyperledger.Indy.WalletApi.WalletType)"/> method to use a custom wallet implementation.
            Attempting to use a wallet type that hasn't previously been registered will result in an error.
            </para>
            <para>The <paramref name="config"/> parameter allows configuration values to be passed to the wallet
            when it is created.  When using the default wallet this value can be null to use the default 
            wallet configuration or a JSON string with the following format can be used:
            <code>
            {
                "freshness_time": int
            }
            </code>
            The value of the <c>freshness_time</c> key is an integer representing the number of seconds
            a value in the wallet will remain valid before expiring.  If not specified the default value 
            for <c>freshness_time</c> is 24 * 60 seconds.
            </para>
            <para>If using a custom wallet type the content of the <paramref name="config"/> parameter can
            be any string value; it is up to the custom wallet type implementer to interpret the value.
            </para>
            <para>The <paramref name="credentials"/> parameter is unused in the default wallet at present, 
            however the value can be used by custom wallet implementations; it is up to the custom wallet 
            type implementer to interpret the value.</para>
            </remarks>
            <param name="poolName">The name of the pool the wallet is associated with.</param>
            <param name="name">The name of the wallet.</param>
            <param name="type">The type of the wallet. </param>
            <param name="config">The wallet configuration JSON.</param>
            <param name="credentials">The wallet credentials JSON or null to use the default credentials.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> with no return value the completes when the operation has finished.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.OpenWalletAsync(System.String,System.String,System.String)">
            <summary>
            Opens a Wallet.
            </summary>
            <remarks>
            <para>Opens a wallet by name using the name of a wallet created earlier using the 
            <see cref="M:Hyperledger.Indy.WalletApi.Wallet.CreateWalletAsync(System.String,System.String,System.String,System.String,System.String)"/> method.
            </para>
            <note type="note">Attempting to open the same wallet more than once will result in an error.</note>
            <para>
            The <paramref name="runtimeConfig"/> parameter allows the default configuration of the wallet
            to be overridden while opening the wallet; this does not replace the configuration registered
            when the wallet was created but instead overrides it for the duration of this opening only.
            See the <see cref="M:Hyperledger.Indy.WalletApi.Wallet.CreateWalletAsync(System.String,System.String,System.String,System.String,System.String)"/> method for 
            details on the configuration string supported by the default wallet type; custom wallet
            types will can support their own format.
            </para>
            <para>The <paramref name="credentials"/> parameter is unused in the default wallet at present, 
            however the value can be used by custom wallet implementations; it is up to the custom wallet 
            type implementer to interpret the value.
            </para>
            </remarks>
            <param name="name">The name of the Wallet to open.</param>
            <param name="runtimeConfig">The runtime configuration to override the configuration the wallet was created with.</param>
            <param name="credentials">The wallet credentials.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to a <see cref="T:Hyperledger.Indy.WalletApi.Wallet"/> instance when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.ListWalletsAsync">
            <summary>
            Lists created wallets as JSON array with each wallet metadata: name, type, name of associated pool
            </summary>
            <returns>The wallets async.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.DeleteWalletAsync(System.String,System.String)">
            <summary>
            Deletes a wallet.
            </summary>
            <remarks>
            <para>Deletes a wallet created earlier using the <see cref="M:Hyperledger.Indy.WalletApi.Wallet.CreateWalletAsync(System.String,System.String,System.String,System.String,System.String)"/>
            by name.
            </para>
            <para>The <paramref name="credentials"/> parameter is unused in the default wallet at present, 
            however the value can be used by custom wallet implementations; it is up to the custom wallet 
            type implementer to interpret the value.
            </para>
            </remarks>
            <param name="name">The name of the wallet to delete.</param>
            <param name="credentials">The wallet credentials.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> with no return value that completes when the operation completes.</returns>
        </member>
        <member name="F:Hyperledger.Indy.WalletApi.Wallet._requiresClose">
            <summary>
            Whether or not the close function has been called.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.Wallet.Handle">
            <summary>
            Gets the SDK handle for the Wallet instance.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.#ctor(System.IntPtr)">
            <summary>
            Initializes a new Wallet instance with the specified handle.
            </summary>
            <param name="handle">The SDK handle for the wallet.</param>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.CloseAsync">
            <summary>
            Closes the wallet.
            </summary>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> with no return value that completes when the operation completes.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.Dispose">
            <summary>
            Disposes of resources.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.Wallet.Finalize">
            <summary>
            Finalizes the resource during GC if it hasn't been already.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.WalletAlreadyOpenedException">
            <summary>
            Exception thrown when attempting to open a wallet that was already opened.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletAlreadyOpenedException.#ctor">
            <summary>
            Initializes a new WalletAlreadyOpenedException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.WalletExistsException">
            <summary>
            Exception thrown when creating a wallet and a wallet with the same name already exists.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletExistsException.#ctor">
            <summary>
            Initializes a new WalletExistsException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.WalletType">
            <summary>
            Base type for implementing custom wallet types.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.#ctor">
            <summary>
            Initializes a new WalletType.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.CreateCallback">
            <summary>
            The delegate to call when a wallet is being created.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.OpenCallback">
            <summary>
            The delegate to call when a wallet is being opened.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.SetCallback">
            <summary>
            The delegate to call when a value is set  on a wallet.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.GetCallback">
            <summary>
            The delegate to call when a value is requested from a wallet.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.GetNotExpiredCallback">
            <summary>
            The delegate to call when an unexpired value is requested from a wallet.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.ListCallback">
            <summary>
            The delegate to call when a list of values is requested from a wallet.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.CloseCallback">
            <summary>
            The delegate to call when a wallet is being closed.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.DeleteCallback">
            <summary>
            The delegate to call when a wallet is being deleted.
            </summary>
        </member>
        <member name="P:Hyperledger.Indy.WalletApi.WalletType.FreeCallback">
            <summary>
            The delegate to call when a value returned by a wallet is to be freed.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.GetWalletByHandle(System.Int32)">
            <summary>
            Gets a wallet by its handle.
            </summary>
            <param name="walletHandle">The handle of the wallet.</param>
            <returns>The wallet instance associated with the handle.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.CreateHandler(System.String,System.String,System.String)">
            <summary>
            Handler for wallet creation.
            </summary>
            <param name="name">The name of the wallet to create.</param>
            <param name="config">The configuration for the wallet.</param>
            <param name="credentials">The credentials of the wallet.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.OpenHandler(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Handler for opening a wallet.
            </summary>
            <param name="name">The name of the wallet to open.</param>
            <param name="config">The wallet configuration that was registered on creation.</param>
            <param name="runtimeConfig">The runtime configuration to use for the wallet.</param>
            <param name="credentials">The wallet credentials.</param>
            <param name="handle">A handle returned for the opened wallet instance.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.SetHandler(System.Int32,System.String,System.String)">
            <summary>
            Handler for setting a value on an opened wallet instance.
            </summary>
            <param name="handle">The handle of the wallet instance.</param>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.GetHandler(System.Int32,System.String,System.IntPtr@)">
            <summary>
            Handler for getting a value from an opened wallet instance.
            </summary>
            <param name="handle">The handle of the wallet instance.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value_ptr">The returned pointer to the value.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.GetNotExpiredHandler(System.Int32,System.String,System.IntPtr@)">
            <summary>
            Handler for getting an unexpired value from an open wallet instance.
            </summary>
            <param name="handle">The handle of the wallet instance.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value_ptr">The returned pointer to the value.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.ListHandler(System.Int32,System.String,System.IntPtr@)">
            <summary>
            Handler for getting a list of values from an open wallet instance.
            </summary>
            <param name="handle">The handle of the wallet instance.</param>
            <param name="keyPrefix">The prefix to filter keys by.</param>
            <param name="values_json_ptr">The returned pointer to the value.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.CloseHandler(System.Int32)">
            <summary>
            Handler for closing an open wallet instance.
            </summary>
            <param name="handle">The handle of the wallet instance.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.DeleteHandler(System.String,System.String,System.String)">
            <summary>
            Handler for deleting a wallet.
            </summary>
            <param name="name">The name of the wallet to delete.</param>
            <param name="config">The configuration of the wallet.</param>
            <param name="credentials">The credentials of the wallet.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.FreeHandler(System.Int32,System.IntPtr)">
            <summary>
            Handler for freeing a value returned by an open wallet instance.
            </summary>
            <param name="handle">The handle of the wallet instance.</param>
            <param name="value">The pointer to the value to free.</param>
            <returns>An ErrorCode indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.MarshalToUnmanaged(System.String)">
            <summary>
            Marshals a string to unmanaged memory.
            </summary>
            <param name="value">The string value to marshal.</param>
            <returns>A pointer to the unmanaged memory.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.Create(System.String,System.String,System.String)">
            <summary>
            Allows an implementer to create a new wallet.
            </summary>
            <remarks>
            <para>When implementing a custom wallet this method is responsible for creating the new wallet
            and storing its configuration and credentials.
            </para>
            </remarks>
            <param name="name">The name of the wallet to create.</param>
            <param name="config">The configuration for the wallet.</param>
            <param name="credentials">The credentials for the wallet.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.Open(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
             Allows an implementer to open a wallet.
            </summary>
            <remarks>
            When implementing a custom wallet this method is responsible for opening the wallet and returning
            a handle for the opened wallet.  The value of the <paramref name="runtimeConfig"/> parameter
            should override any corresponding values provided in the <paramref name="config"/> parameter
            and value of the <paramref name="credentials"/> parameter should be used to control access 
            to the wallet.
            </remarks>
            <param name="name">The name of the wallet to open.</param>
            <param name="config">The configuration for the wallet.</param>
            <param name="runtimeConfig">The runtime configuration for the wallet.</param>
            <param name="credentials">The credentials of the wallet.</param>
            <param name="walletHandle">The handle assigned to the wallet.</param> 
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.Close(System.Int32)">
            <summary>
             Allows an implementer to close a wallet.
            </summary>
            <remarks>
            When implementing a custom wallet this method is responsible for closing the wallet with 
            the handle allocated earlier in the <see cref="M:Hyperledger.Indy.WalletApi.WalletType.Open(System.String,System.String,System.String,System.String,System.Int32@)"/>
            method.
            </remarks>
            <param name="walletHandle">The handle of the wallet to close.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletType.Delete(System.String,System.String,System.String)">
            <summary>
             Allows an implementer to delete a wallet.
            </summary>
            <remarks>
            When implementing a custom wallet this method is responsible for deleting a wallet created
            earlier via the <see cref="M:Hyperledger.Indy.WalletApi.WalletType.Create(System.String,System.String,System.String)"/> method.  The value of the 
            <paramref name="credentials"/> parameter should be used to control access whether or not
            the wallet can be deleted.</remarks>
            <param name="name">The name of the wallet being deleted</param>
            <param name="config">The configuration of the wallet.</param>
            <param name="credentials">The credentials of the wallet.</param>
            <returns>An <see cref="T:Hyperledger.Indy.ErrorCode"/> value indicating the outcome of the operation.</returns>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.WalletValueNotFoundException">
            <summary>
            Exception thrown when requesting a value from a wallet and the specified key does not exist.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WalletValueNotFoundException.#ctor">
            <summary>
            Initializes a new WalletValueNotFoundException.
            </summary>
        </member>
        <member name="T:Hyperledger.Indy.WalletApi.WrongWalletForPoolException">
            <summary>
            Exception thrown when attempting to use a wallet with the wrong pool.
            </summary>
        </member>
        <member name="M:Hyperledger.Indy.WalletApi.WrongWalletForPoolException.#ctor">
            <summary>
            Initializes a new WrongWalletForPoolException.
            </summary>
        </member>
    </members>
</doc>
